"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[2996],{3905:function(e,a,n){n.d(a,{Zo:function(){return s},kt:function(){return N}});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function d(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},s=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=p(n),N=r,c=m["".concat(i,".").concat(N)]||m[N]||u[N]||l;return n?t.createElement(c,o(o({ref:a},s),{},{components:n})):t.createElement(c,o({ref:a},s))}));function N(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var d={};for(var i in a)hasOwnProperty.call(a,i)&&(d[i]=a[i]);d.originalType=e,d.mdxType="string"==typeof e?e:r,o[1]=d;for(var p=2;p<l;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:function(e,a,n){n.d(a,{Z:function(){return o}});var t=n(67294),r=n(34334),l="tabItem_Ymn6";function o(e){var a=e.children,n=e.hidden,o=e.className;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},a)}},65488:function(e,a,n){n.d(a,{Z:function(){return N}});var t=n(83117),r=n(67294),l=n(34334),o=n(72389),d=n(67392),i=n(7094),p=n(12466),s="tabList__CuJ",u="tabItem_LNqP";function m(e){var a,n,o=e.lazy,m=e.block,N=e.defaultValue,c=e.values,k=e.groupId,T=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=c?c:f.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),g=(0,d.l)(b,(function(e,a){return e.value===a.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===N?N:null!=(a=null!=N?N:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?a:f[0].props.value;if(null!==v&&!b.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=(0,i.U)(),D=h.tabGroupChoices,y=h.setTabGroupChoices,j=(0,r.useState)(v),C=j[0],x=j[1],I=[],Z=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var w=D[k];null!=w&&w!==C&&b.some((function(e){return e.value===w}))&&x(w)}var O=function(e){var a=e.currentTarget,n=I.indexOf(a),t=b[n].value;t!==C&&(Z(a),x(t),null!=k&&y(k,String(t)))},P=function(e){var a,n=null;switch(e.key){case"ArrowRight":var t,r=I.indexOf(e.currentTarget)+1;n=null!=(t=I[r])?t:I[0];break;case"ArrowLeft":var l,o=I.indexOf(e.currentTarget)-1;n=null!=(l=I[o])?l:I[I.length-1]}null==(a=n)||a.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",s)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},T)},b.map((function(e){var a=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:C===a?0:-1,"aria-selected":C===a,key:a,ref:function(e){return I.push(e)},onKeyDown:P,onFocus:O,onClick:O},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":C===a})}),null!=n?n:a)}))),o?(0,r.cloneElement)(f.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map((function(e,a){return(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==C})}))))}function N(e){var a=(0,o.Z)();return r.createElement(m,(0,t.Z)({key:String(a)},e))}},49417:function(e,a,n){n.r(a),n.d(a,{assets:function(){return m},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return N}});var t=n(83117),r=n(80102),l=(n(67294),n(3905)),o=n(65488),d=n(85162),i=["components"],p={sidebar_position:3,title:"Draft\u4ee3\u7406"},s=void 0,u={unversionedId:"jimmer-core/draft",id:"jimmer-core/draft",title:"Draft\u4ee3\u7406",description:"\u4f7f\u7528AnnotationProcessor/KSP plugin",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/jimmer-core/draft.mdx",sourceDirName:"jimmer-core",slug:"/jimmer-core/draft",permalink:"/jimmer/zh/docs/jimmer-core/draft",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-core/draft.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Draft\u4ee3\u7406"},sidebar:"tutorialSidebar",previous:{title:"\u5feb\u901f\u4e0a\u624b",permalink:"/jimmer/zh/docs/jimmer-core/usage"},next:{title:"\u52a8\u6001\u6027",permalink:"/jimmer/zh/docs/jimmer-core/dynamic"}},m={},N=[{value:"\u4f7f\u7528AnnotationProcessor/KSP plugin",id:"\u4f7f\u7528annotationprocessorksp-plugin",level:2},{value:"\u6807\u91cf\u5c5e\u6027",id:"\u6807\u91cf\u5c5e\u6027",level:2},{value:"\u5f15\u7528\u5173\u8054",id:"\u5f15\u7528\u5173\u8054",level:2},{value:"\u8986\u76d6getter <code>parent()</code>",id:"\u8986\u76d6getter-parent",level:3},{value:"\u65b0\u589egetter <code>parent(boolean)</code>",id:"\u65b0\u589egetter-parentboolean",level:3},{value:"\u65b0\u589e<code>setParent</code>",id:"\u65b0\u589esetparent",level:3},{value:"\u65b0\u589e\u57fa\u4e8elambda\u7684<code>applyParent</code>",id:"\u65b0\u589e\u57fa\u4e8elambda\u7684applyparent",level:3},{value:"\u96c6\u5408\u5173\u8054",id:"\u96c6\u5408\u5173\u8054",level:2},{value:"\u7ee7\u627fgetter <code>childNodes()</code>",id:"\u7ee7\u627fgetter-childnodes",level:3},{value:"\u65b0\u589egetter <code>childNodes(boolean)</code>",id:"\u65b0\u589egetter-childnodesboolean",level:3},{value:"\u65b0\u589e<code>setChildNodes</code>",id:"\u65b0\u589esetchildnodes",level:3},{value:"\u65b0\u589e<code>addIntoChildNodes</code>",id:"\u65b0\u589eaddintochildnodes",level:3}],c={toc:N};function k(e){var a=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u4f7f\u7528annotationprocessorksp-plugin"},"\u4f7f\u7528AnnotationProcessor/KSP plugin"),(0,l.kt)("p",null,"\u7528\u6237\u5b9a\u4e49\u4e0d\u53ef\u53d8\u6570\u636e\u63a5\u53e3"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNode.java"',title:'"TreeNode.java"'},"package yourpackage;\n\nimport javax.validation.constraints.Null;\nimport java.util.List;\n\nimport org.babyfish.jimmer.Immutable;\n\n@Immutable\npublic interface TreeNode {\n    \n    String name();\n\n    @Null\n    TreeNode parent();\n\n    List<TreeNode> childNodes();\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNode.kt"',title:'"TreeNode.kt"'},"package yourpackage\n\nimport org.babyfish.jimmer.Immutable\n\n@Immutable\ninterface TreeNode {\n\n    val name: String\n\n    val parent: TreeNode?\n\n    val childNodes: List<TreeNode>\n}\n")))),(0,l.kt)("p",null,"\u7531\u4e8egradle\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b58\u5728Annotation Processor/KSP plugin"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"For java project",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle"',title:'"build.gradle"'},"dependencies {\n\n    implementation 'org.babyfish.jimmer:jimmer-core:0.7.79'\n\n    // highlight-next-line\n    annotationProcessor 'org.babyfish.jimmer:jimmer-apt:0.7.79'\n    // This annotation processor generates source code\n    // for INTERFACEs marked by\n    // `@org.babyfish.jimmer.Immutable` or\n    // `@org.babyfish.jimmer.sql.Entity`\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"For kotlin project",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts"',title:'"build.gradle.kts"'},'plugins {\n    id("com.google.devtools.ksp") version "1.7.10-1.0.6"\n    ... other code...\n}\ndependencies {\n\n    implementation("org.babyfish.jimmer:jimmer-core-kotlin:0.7.79")\n    // highlight-next-line\n    ksp("org.babyfish.jimmer:jimmer-ksp:0.7.79")\n    // The ksp plugin generates source code\n    // for INTERFACEs marked by\n    // `@org.babyfish.jimmer.Immutable` or\n    // `@org.babyfish.jimmer.sql.Entity`\n}\n\nkotlin {\n    sourceSets.main {\n        kotlin.srcDir("build/generated/ksp/main/kotlin")\n    }\n}\n')))),(0,l.kt)("p",null,"\u6b64Annotation Processor/KSP plugin\u5c06\u751f\u6210\u5982\u4e0b\u4e00\u4e2a\u540d\u79f0\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\u7684\u63a5\u53e3\u7c7b\u578b\uff1a"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"package org.babyfish.jimmer.example.core.model;\n\nimport java.util.List;\nimport org.babyfish.jimmer.DraftConsumer;\nimport org.babyfish.jimmer.lang.OldChain;\n\npublic interface TreeNodeDraft extends TreeNode, Draft {\n\n    // highlight-next-line\n    TreeNodeDraft.Producer $ = Producer.INSTANCE;\n\n\n    @OldChain\n    TreeNodeDraft setName(String name);\n\n\n    TreeNodeDraft parent();\n\n    TreeNodeDraft parent(boolean autoCreate);\n\n\n    @OldChain\n    TreeNodeDraft setParent(TreeNode parent);\n\n    @OldChain\n    TreeNodeDraft applyParent(DraftConsumer<TreeNodeDraft> block);\n\n    @OldChain\n    TreeNodeDraft applyParent(TreeNode base, DraftConsumer<TreeNodeDraft> block);\n\n\n\n    List<TreeNodeDraft> childNodes(boolean autoCreate);\n\n    @OldChain\n    TreeNodeDraft setChildNodes(List<TreeNode> childNodes);\n\n    @OldChain\n    TreeNodeDraft addIntoChildNodes(DraftConsumer<TreeNodeDraft> block);\n\n    @OldChain\n    TreeNodeDraft addIntoChildNodes(TreeNode base, DraftConsumer<TreeNodeDraft> block);\n\n\n\n    class Producer {\n\n        private Producer() {}\n\n        // highlight-next-line\n        public TreeNode produce(\n            DraftConsumer<TreeNodeDraft> block\n        ) {\n            return produce(null, block);\n        }\n\n        // highlight-next-line\n        public TreeNode produce(\n            TreeNode base, \n            DraftConsumer<TreeNodeDraft> block\n        ) {\n            ...omit...\n        }\n\n        ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n    }\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode {\n    public override var name: String\n\n    public override var parent: TreeNode?\n\n    public override var childNodes: List<TreeNode>\n\n    public fun parent(): TreeNodeDraft\n\n    public fun childNodes(): MutableList<TreeNodeDraft>\n\n    public object `$` {\n        \n        ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n\n        public fun produce(\n            base: TreeNode? = null, \n            block: TreeNodeDraft.() -> Unit\n        ): TreeNode {\n            ...omit code...\n        }\n    }\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n\n// highlight-next-line\npublic fun ImmutableCreator<TreeNode>.`by`(\n    base: TreeNode? = null, \n    block: TreeNodeDraft.() -> Unit\n): TreeNode = \n    TreeNodeDraft.`$`.produce(base, block)\n\npublic fun MutableList<TreeNodeDraft>.addBy(\n    base: TreeNode? = null,\n    block: TreeNodeDraft.() -> Unit\n): MutableList<TreeNodeDraft> {\n    add(TreeNodeDraft.`$`.produce(base, block) as TreeNodeDraft)\n    return this\n}\n")))),(0,l.kt)("p",null,"\u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u4ece\u5934\u521b\u5efa\u5168\u65b0\u7684\u5bf9\u8c61"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"TreeNode oldTreeNode = TreeNodeDraft.$\n    .produce(treeNodeDraft -> {\n        ...\u7701\u7565...\n    });\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"vak oldTreeNode = new(TreeNode::class).by {\n    ...\u7701\u7565...\n}\n"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u6839\u636e\u5df2\u6709\u7684\u5bf9\u8c61\uff0c\u8fdb\u884c\u67d0\u4e9b\u201c\u53d8\u66f4\u201d\u540e\uff0c\u521b\u5efa\u65b0\u7684\u5bf9\u8c61"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"TreeNode newTreeNode = TreeNodeDraft.$\n    .produce(oldTreeNode, treeNodeDraft -> {\n        ...\u7701\u7565...\n    });\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newTreeNode = new(TreeNode::class).by(oldTreeNode) {\n    ...\u7701\u7565...\n}\n")))))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"\u8fd9\u4e24\u79cd\u7528\u6cd5\u7684\u5b8c\u6574\u7684\u4ee3\u7801\u5df2\u7ecf\u5728",(0,l.kt)("a",{parentName:"p",href:"./usage"},"jimmer-core\u521d\u4f53\u9a8c"),"\u4e2d\u5df2\u7ecf\u88ab\u793a\u8303\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u7701\u7565\u4e86lambda\u8868\u8fbe\u5f0f\u5185\u90e8\u7684\u4ee3\u7801\uff0c\u4e0d\u505a\u91cd\u590d\u7c98\u8d34\u3002")),(0,l.kt)("h2",{id:"\u6807\u91cf\u5c5e\u6027"},"\u6807\u91cf\u5c5e\u6027"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TreeNode.name"),"\u662f\u4e00\u4e2a\u6807\u91cf\u5c5e\u6027\u3002",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\u4f1a\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"setter\u65b9\u6cd5/\u53ef\u5199\u5c5e\u6027")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    @OldChain\n    TreeNodeDraft setName(String name);\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode {\n    \n    // var, not val\n    public override var name: String\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")))),(0,l.kt)("p",null,"\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u6b64\u65b9\u6cd5\u8bbe\u7f6edraft\u4ee3\u7406\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"name"),"\u5c5e\u6027"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = TreeNodeDraft.$\n    .produce(draft -> {\n        draft.setName("Root Node");\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNode = new(TreeNode::class).by {\n    name = "Root Node"\n} \n')))),(0,l.kt)("h2",{id:"\u5f15\u7528\u5173\u8054"},"\u5f15\u7528\u5173\u8054"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TreeNode.store"),"\u662f\u4e00\u4e2a\u5173\u8054\u5c5e\u6027\u3002\u5176\u7c7b\u578b\u662f\u5bf9\u8c61\uff0c\u800c\u975e\u96c6\u5408\u3002\u5982\u679c\u7528ORM\u7684\u8bdd\u6765\u8bb2\uff0c\u662f\u4e00\u5bf9\u4e00\u6216\u591a\u5bf9\u4e00\u5173\u8054\u3002"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\u4e3a\u5176\u5b9a\u4e49\u4e86\u591a\u4e2a\u65b9\u6cd5"),(0,l.kt)("h3",{id:"\u8986\u76d6getter-parent"},"\u8986\u76d6getter ",(0,l.kt)("inlineCode",{parentName:"h3"},"parent()")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    TreeNodeDraft parent();\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode {\n    \n    public fun parent(): TreeNodeDraft\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"\u6ce8\u610f\uff0c\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\uff0c\u800c\u975e",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNode"),"\u3002"),(0,l.kt)("p",{parentName:"admonition"},"\u5373\uff0c\u5982\u679cdraft\u5bf9\u8c61\u7684\u5f15\u7528\u5173\u8054\u88ab\u8bbe\u7f6e\u8fc7\u4e14\u88ab\u8bbe\u7f6e\u4e3a\u975enull\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u4e00\u5b9a\u8fd4\u56dedraft\u5bf9\u8c61\u3002\u8fd9\u6837\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u66f4\u6df1\u7684\u5173\u8054\u5bf9\u8c61\u3002")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode newTreeNode = TreeNodeDraft.$\n    .produce(treeNode, draft -> {\n        draft.parent().setName("Daddy");\n        draft.parent().parent().setName("Grandpa");\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'@DslScope\nvar newTreeNode = new(TreeNode::class).by(treeNode) {\n    parent().name = "Daddy"\n    parent().parent().name = "Grandpa"\n}\n')))),(0,l.kt)("h3",{id:"\u65b0\u589egetter-parentboolean"},"\u65b0\u589egetter ",(0,l.kt)("inlineCode",{parentName:"h3"},"parent(boolean)")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    TreeNode parent(boolean autoCreate);\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode {\n\n    // \u8fd9\u4e2a\u5c5e\u6027\u7684getter\u7b49\u4ef7\u4e8eJava\u7684`parent(false)` \n    override fun parent: TreeNode\n    \n    // \u8fd9\u4e2a\u51fd\u6570\u7b49\u4ef7\u4e8eJava\u7684`parent(true)` \n    public fun parent(): TreeNodeDraft\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"parent(false)"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"parent()"),"\u7b49\u4ef7\uff0c\u5177\u5907\u4ee5\u4e0b\u4e24\u4e2a\u95ee\u9898\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5982\u679cdraft\u5bf9\u8c61\u7684\u5c5e\u6027",(0,l.kt)("inlineCode",{parentName:"li"},"parent"),"\u672a\u88ab\u8bbe\u7f6e\uff0c\u8bbf\u95ee\u5b83\u4f1a\u5bfc\u81f4\u5f02\u5e38"),(0,l.kt)("li",{parentName:"ul"},"\u5982\u679cdraft\u5bf9\u8c61\u7684\u5c5e\u6027",(0,l.kt)("inlineCode",{parentName:"li"},"parent"),"\u88ab\u8bbe\u7f6e\u4e3anull\uff0c\u8bbf\u95ee\u5b83\u4f1a\u8fd4\u56denull\uff0cnull\u65e0\u6cd5\u652f\u6301\u8fdb\u4e00\u6b65\u4fee\u6539\u3002")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"parent(true)"),"\u53ef\u4ee5\u89e3\u51b3\u4ee5\u4e0a\u7684\u95ee\u9898\uff0c\u5982\u679c\u4e0a\u8ff0\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u6ee1\u8db3\uff0c\u5c31\u81ea\u52a8\u521b\u5efa\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u5173\u8054\u5bf9\u8c61\uff0c\u7136\u540e\u5141\u8bb8\u7528\u6237\u4fee\u6539\u3002\u8fd9\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u529f\u80fd\uff0c\u5c24\u5176\u662f\u4ece\u5934\u521b\u5efa\u5bf9\u8c61\u65f6\u3002"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = TreeNodeDraft.$\n    .produce(/* No `base` here */ draft -> {\n        draft.parent(true).setName("Daddy");\n        draft.parent(true).parent(true).setName("Grandpa");\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNode = new(TreeNode::class).by /* No `base` here */ {\n    parent().setName("Daddy");\n    parent().parent().setName("Grandpa");\n}\n')))),(0,l.kt)("h3",{id:"\u65b0\u589esetparent"},"\u65b0\u589e",(0,l.kt)("inlineCode",{parentName:"h3"},"setParent")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    @OldChain\n    TreeNodeDraft setParent(TreeNode parent);\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode, Draft {\n\n    // var, not val\n    public var parent: TreeNode\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")))),(0,l.kt)("p",null,"\u8be5setter\u5141\u8bb8\u7528\u6237\u66ff\u6362\u6574\u4e2a\u5173\u8054\u5bf9\u8c61\u3002"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = TreeNodeDraft.$\n    .produce(draft -> {\n        draft.setParent(\n            TreeNodeDraft.$.produce(daddyDraft -> {\n                daddyDraft.setName("Daddy")\n            })\n        )\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'var treeNode = new(TreeNode::class).by {\n    parent = new(TreeNode::class).by {\n        name = "Daddy"\n    }\n}\n')))),(0,l.kt)("h3",{id:"\u65b0\u589e\u57fa\u4e8elambda\u7684applyparent"},"\u65b0\u589e\u57fa\u4e8elambda\u7684",(0,l.kt)("inlineCode",{parentName:"h3"},"applyParent")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"\u6b64\u529f\u80fd\u4ec5\u9002\u7528\u4e8eJava"),(0,l.kt)("p",{parentName:"admonition"},"kotlin\u7684\u4ee3\u7801\u5df2\u7ecf\u8db3\u591f\u7b80\u6d01\u4e86\uff0c\u4e0d\u9700\u8981\u8fd9\u79cd\u65b9\u6cd5\u6765\u7b80\u5316\u4ee3\u7801\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    @OldChain\n    TreeNodeDraft applyParent(\n        DraftConsumer<TreeNodeDraft> block\n    );\n\n    @OldChain\n    TreeNodeDraft applyParent(\n        TreeNode base, \n        DraftConsumer<TreeNodeDraft> block\n    );\n\n    ...\u7701\u7565\u5176\u5b83\u4ee3\u7801...\n}\n")),(0,l.kt)("p",null,"\u8fd9\u4e24\u4e2asetter\u7528\u4e8e\u7b80\u5316\u7684\u4ee3\u7801\u3002\u7531\u4e8e\u4e24\u4e2a\u65b9\u6cd5\u7684\u7528\u6cd5\u9ad8\u5ea6\u76f8\u4f3c\uff0c\u4ec5\u4ee5\u7b2c\u4e00\u4e2a\u4e3e\u4f8b\u3002"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u6bd4\u8f83\u5570\u55e6\u7684\u5199\u6cd5"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode oldTreeNode = TreeNodeDraft.$\n    .produce(draft -> {\n        draft.setParent(\n            TreeNodeDraft.$.produce(daddyDraft -> {\n                daddyDraft.setName("Daddy")\n            })\n        )\n    });\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u6bd4\u8f83\u7b80\u6d01\u7684\u5199\u6cd5"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode oldTreeNode = TreeNodeDraft.$\n    .produce(draft -> {\n        draft.applyParent(daddyDraft -> {\n            daddyDraft.setName("Daddy")\n        })\n    });\n')))),(0,l.kt)("p",null,"\u4e8c\u8005\u5b8c\u5168\u7b49\u4ef7\u3002"),(0,l.kt)("h2",{id:"\u96c6\u5408\u5173\u8054"},"\u96c6\u5408\u5173\u8054"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TreeNode.childNodes"),"\u662f\u4e00\u4e2a\u5173\u8054\u5c5e\u6027\u3002\u5176\u7c7b\u578b\u662f\u96c6\u5408\uff0c\u800c\u975e\u5bf9\u8c61\u3002\u5982\u679c\u7528ORM\u7684\u8bdd\u6765\u8bb2\uff0c\u662f\u4e00\u5bf9\u591a\u6216\u591a\u5bf9\u591a\u5173\u8054\u3002"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\u4e3a\u5176\u5b9a\u4e49\u4e86\u591a\u4e2a\u65b9\u6cd5"),(0,l.kt)("h3",{id:"\u7ee7\u627fgetter-childnodes"},"\u7ee7\u627fgetter ",(0,l.kt)("inlineCode",{parentName:"h3"},"childNodes()")),(0,l.kt)("p",null,"\u65e0\u8bba\u5bf9Java\u8fd8\u662fkotlin\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\u65e0\u6cd5\u8986\u76d6",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes()"),"\u65b9\u6cd5\uff0c\u4ece\u8bed\u6cd5\u5c42\u9762\u4e0a\u8bb2\uff0c\u53ea\u80fd\u7ee7\u627f",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNode"),"\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes()"),"\u65b9\u6cd5\u3002"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"List<TreeNode> childNodes();\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"var childNodes: List<TreeNode>\n")))),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"\u867d\u7136\u8fd9\u4e2a\u7684\u65b9\u6cd5\u5728",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNode"),"\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u8fd4\u56de\u7c7b\u578b\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"List<TreeNode>"),"\uff0c\u4f46\u662f\uff0c\u88ab",(0,l.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),"\u63a5\u53e3\u7ee7\u627f\u540e\uff0c\u5e94\u8be5\u5c06\u5176\u8fd4\u56de\u7c7b\u578b\u7406\u89e3\u6210",(0,l.kt)("inlineCode",{parentName:"p"},"List<TreeNodeDraft>"),"\u3002"),(0,l.kt)("p",{parentName:"admonition"},"\u8fd4\u56de\u7c7b\u578b\u7684\u4e0d\u517c\u5bb9\uff0c\u4e5f\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u65e0\u6cd5\u8986\u76d6\u8fd9\u4e2a\u65b9\u6cd5\u3002")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"\u5982\u679cdraft\u5bf9\u8c61\u7684\u96c6\u5408\u5173\u8054\u88ab\u8bbe\u7f6e\u8fc7\uff0c\u8fd4\u56de\u7684\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662fdraft\u3002\u8fd9\u6837\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u96c6\u5408\u4e2d\u66f4\u6df1\u7684\u5173\u8054\u5bf9\u8c61\u3002")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode newTreeNode = TreeNodeDraft.$\n    .produce(treeNode, draft -> {\n        ((TreeNodeDraft)\n            draft\n                .childNodes().get(0)\n        ).setName("Son");\n        ((TreeNodeDraft)\n            draft\n                .childNodes().get(0)\n                .childNodes().get(0)\n        ).setName("Grandson");\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val newTreeNode = new(TreeNode::class).by(treeNode) {\n    (childNodes[0] as TreeNodeDraft)\n        .name = "Son"\n    (childNodes[0].childNodes[0] as TreeNodeDraft)\n        .name = "Son"\n}\n')))),(0,l.kt)("admonition",{type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u4e24\u4e2a\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5bf9\u5f00\u53d1\u4f53\u9a8c\u4ea7\u751f\u4e86\u663e\u8457\u7684\u7834\u574f\uff0c\u6240\u4ee5\uff0c\u4e0d\u63a8\u8350\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u5982\u6b64\u4f7f\u7528\u3002"),(0,l.kt)("p",{parentName:"admonition"},"\u4e3a\u5b9e\u73b0\u76f8\u540c\u76ee\u7684\uff0c\u66f4\u63a8\u8350\u63a5\u4e0b\u6765\u8981\u4ecb\u7ecd\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes(boolean)"),"\u65b9\u6cd5\u3002")),(0,l.kt)("h3",{id:"\u65b0\u589egetter-childnodesboolean"},"\u65b0\u589egetter ",(0,l.kt)("inlineCode",{parentName:"h3"},"childNodes(boolean)")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    List<TreeNodeDraft> childNodes(boolean autoCreate);\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"childNodes(false)"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes()"),"\u7b49\u4ef7\uff0c\u5982\u679cdraft\u5bf9\u8c61\u7684\u5c5e\u6027",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes"),"\u672a\u88ab\u8bbe\u7f6e\uff0c\u8bbf\u95ee\u5b83\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002\n",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes(true)"),"\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u96c6\u5408\u5173\u8054\u5c5e\u6027\u8fd8\u672a\u88ab\u8bbe\u7f6e\uff0c\u5219\u81ea\u52a8\u521b\u5efa\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u5141\u8bb8\u7528\u6237\u4fee\u6539\u8be5\u96c6\u5408\u3002")),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode, Draft {\n\n    override var childNodes: List<TreeNode>\n    \n    fun childNodes(): MutableList<TreeNode>\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"childNodes"),"\u5c5e\u6027\u7684getter\u7b49\u4ef7\u4e8eJava\u7684",(0,l.kt)("inlineCode",{parentName:"li"},"childNodes(false)"),"\u3002\u5982\u679c\u53ef\u53d8\u4ee3\u7406\u7684\u6b64\u5c5e\u6027\u672a\u88ab\u8bbe\u7f6e, \u8bbf\u95ee\u5b83\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"childNodes()"),"\u51fd\u6570\u7b49\u4ef7\u4e8eJava\u7684",(0,l.kt)("inlineCode",{parentName:"li"},"childNodes(true)"),"\uff0c\u5982\u679c\u5c5e\u6027\u672a\u88ab\u8bbe\u7f6e\u5219\u81ea\u52a8\u521b\u5efa, \u5141\u8bb8\u7528\u6237\u4fee\u6539\u8be5\u96c6\u5408\u3002\n")))),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode newTreeNode = TreeNodeDraft.$\n    .produce(treeNode, draft -> {\n        draft\n            .childNodes(false)\n            .get(0)\n            .setName("Son");\n        draft\n            .childNodes(false)\n            .get(0)\n            .childNodes(false)\n            .get(0)\n            .setName("Grandson");\n    });\n')),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"\u8bda\u7136\uff0c\u5f53\u53c2\u6570\u4e3a true \u65f6\uff0cchildNodes(boolean) \u80fd\u591f\u5728\u672a\u6307\u5b9a childNodes \u5c5e\u6027\u65f6\u81ea\u52a8\u521b\u5efa\u96c6\u5408\u3002"),(0,l.kt)("p",{parentName:"admonition"},"\u7136\u800c\uff0c\u5f53\u53c2\u6570\u4e3a false \u65f6\uff0c\u540c\u6837\u4e5f\u5f88\u6709\u7528\u3002\u7531\u4e8e\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"List<TreeNodeDraft>"),"\u800c\u4e0d\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"List<TreeNode>"),"\uff0c\u56e0\u6b64\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\u5bf9\u5f00\u53d1\u4eba\u5458\u4e0d\u53cb\u597d\u7684\u4ee3\u7801\u5c06\u4e0d\u518d\u5b58\u5728\u3002"),(0,l.kt)("p",{parentName:"admonition"},"\u8fd9\u4e2a\u6848\u4f8b\u4e0e",(0,l.kt)("a",{parentName:"p",href:"./usage"},"jimmer-core\u521d\u4f53\u9a8c"),"\u4e2d\u7684\u4e00\u6837\u3002"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val newTreeNode = new(TreeNode::class).by(treeNode) {\n    childNodes()[0].name = "Son"\n    childNodes()[0].childNodes()[0].name = "Grandson"\n}\n')))),(0,l.kt)("h3",{id:"\u65b0\u589esetchildnodes"},"\u65b0\u589e",(0,l.kt)("inlineCode",{parentName:"h3"},"setChildNodes")),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    @OldChain\n    TreeNodeDraft setChildNodes(List<TreeNode> childNodes);\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.kt"',title:'"TreeNodeDraft.kt"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode, Draft {\n\n    // var, not val\n    overrie var childNodes: List<TreeNode>\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n")))),(0,l.kt)("p",null,"\u8be5setter\u5141\u8bb8\u7528\u6237\u66ff\u6362\u6574\u4e2a\u5173\u8054\u96c6\u5408\u3002"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = TreeNodeDraft.$\n    .produce(draft -> {\n        draft.setChildNodes(\n            Arrays.asList(\n                TreeNodeDraft.$.produce(childDraft -> {\n                    childDraft.setName("Eldest son")\n                }),\n                TreeNodeDraft.$.produce(childDraft -> {\n                    childDraft.setName("Second son")\n                })\n            )\n        )\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNode = new(TreeNode::class).by {\n    childNodes = listOf(\n        new(TreeNode::class).by {\n            name = "Eldest son"\n        },\n        new(TreeNode::class).by {\n            name = "Second son"\n        }\n    )\n}\n')))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"\u7565\u663e\u7e41\u7410\uff0c\u66f4\u63a8\u8350\u4e0b\u9762\u5373\u5c06\u4ecb\u7ecd\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"addIntoChildNodes"))),(0,l.kt)("h3",{id:"\u65b0\u589eaddintochildnodes"},"\u65b0\u589e",(0,l.kt)("inlineCode",{parentName:"h3"},"addIntoChildNodes")),(0,l.kt)("p",null,"\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"setChildNodes"),"\u66ff\u6362\u4e86\u6574\u4e2a\u96c6\u5408\uff0c\u4f46\u662f\u8fd8\u53ef\u4ee5\u9009\u62e9\u4ee5\u9010\u4e2a\u6dfb\u52a0\u96c6\u5408\u5143\u7d20\uff0c\u800c\u975e\u4e00\u6b21\u6027\u66ff\u6362\u6574\u4e2a\u96c6\u5408\u3002"),(0,l.kt)("p",null,"\u751f\u6210\u4ee3\u7801\u5982\u4e0b"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"public interface TreeNodeDraft extends TreeNode, Draft {\n\n    @OldChain\n    TreeNodeDraft addIntoChildNodes(\n        DraftConsumer<TreeNodeDraft> block\n    );\n\n    @OldChain\n    TreeNodeDraft addIntoChildNodes(\n        TreeNode base, \n        DraftConsumer<TreeNodeDraft> block\n    );\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n"))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNodeDraft.java"',title:'"TreeNodeDraft.java"'},"@DslScope\npublic interface TreeNodeDraft : TreeNode, Draft {\n\n    public fun childNodes(): MutableList<TreeNodeDraft>\n\n    ...\u7701\u7565\u5176\u4ed6\u4ee3\u7801...\n}\n\n// highlight-next-line\npublic fun MutableList<TreeNodeDraft>.addBy(\n    base: TreeNode? = null,\n    block: TreeNodeDraft.() -> Unit\n): MutableList<TreeNodeDraft> {\n    ...omit...\n    return this;\n}\n")))),(0,l.kt)("p",null,"\u4f60\u5e94\u8be5\u5982\u6b64\u4f7f\u7528\u3002"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = TreeNodeDraft.$\n    .produce(draft -> {\n        draft\n            .addIntoChildNodes(childDraft ->\n                childDraft.setName("Eldest son")\n            )\n            .addIntoChildNodes(childDraft ->\n                childDraft.setName("Second son")\n            )\n    });\n'))),(0,l.kt)(d.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNode = new(TreeNode::class).by {\n    childNodes().addBy {\n        name = "Eldest son"\n    }\n    childNodes().addBy {\n        name = "Second son"\n    }\n}\n')))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"\u8fd9\u79cd\u5199\u6cd5\u9690\u542b\u4e86\u4e00\u4e2a\u529f\u80fd\uff0cdraft\u5bf9\u8c61\u7684\u5c5e\u6027",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes"),"\u672a\u88ab\u8bbe\u7f6e\uff0c\u81ea\u52a8\u521b\u5efa\u96c6\u5408\u3002\u5373\uff0c\u5185\u7f6e\u4e86\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"childNodes(true)"),"\u3002"),(0,l.kt)("p",{parentName:"admonition"},"\u5f88\u660e\u663e\uff0c\u8fd9\u79cd\u5199\u6cd5\u6bd4\u4f7f\u7528setter\u66ff\u6362\u6574\u4e2a\u96c6\u5408\u66f4\u7b80\u5355\uff0c\u6240\u4ee5\uff0c\u66f4\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\u3002")))}k.isMDXComponent=!0}}]);