"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[4261],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=l,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(67294),l=t(34334),i="tabItem_Ymn6";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,r),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(83117),l=t(67294),i=t(34334),r=t(72389),o=t(67392),s=t(7094),c=t(12466),u="tabList__CuJ",p="tabItem_LNqP";function m(e){var n,t,r=e.lazy,m=e.block,d=e.defaultValue,g=e.values,k=e.groupId,b=e.className,h=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),f=(0,o.l)(v,(function(e,n){return e.value===n.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var C=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==C&&!v.some((function(e){return e.value===C})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,s.U)(),S=y.tabGroupChoices,N=y.setTabGroupChoices,T=(0,l.useState)(C),x=T[0],q=T[1],j=[],I=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var w=S[k];null!=w&&w!==x&&v.some((function(e){return e.value===w}))&&q(w)}var D=function(e){var n=e.currentTarget,t=j.indexOf(n),a=v[t].value;a!==x&&(I(n),q(a),null!=k&&N(k,String(a)))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,l=j.indexOf(e.currentTarget)+1;t=null!=(a=j[l])?a:j[0];break;case"ArrowLeft":var i,r=j.indexOf(e.currentTarget)-1;t=null!=(i=j[r])?i:j[j.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":m},b)},v.map((function(e){var n=e.value,t=e.label,r=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:function(e){return j.push(e)},onKeyDown:E,onFocus:D,onClick:D},r,{className:(0,i.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":x===n})}),null!=t?t:n)}))),r?(0,l.cloneElement)(h.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function d(e){var n=(0,r.Z)();return l.createElement(m,(0,a.Z)({key:String(n)},e))}},24838:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var a=t(83117),l=t(80102),i=(t(67294),t(3905)),r=t(65488),o=t(85162),s=["components"],c={sidebar_position:3,title:"SqlClient"},u=void 0,p={unversionedId:"jimmer-sql/basic/sql-client",id:"jimmer-sql/basic/sql-client",title:"SqlClient",description:"SqlClient is the entry point jimmer-sql API.",source:"@site/docs/jimmer-sql/basic/sql-client.mdx",sourceDirName:"jimmer-sql/basic",slug:"/jimmer-sql/basic/sql-client",permalink:"/jimmer/docs/jimmer-sql/basic/sql-client",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/basic/sql-client.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"SqlClient"},sidebar:"tutorialSidebar",previous:{title:"Mapping",permalink:"/jimmer/docs/jimmer-sql/basic/mapping"},next:{title:"Table and TableEx",permalink:"/jimmer/docs/jimmer-sql/basic/table-and-table-ex"}},m={},d=[{value:"Create SqlClient",id:"create-sqlclient",level:2},{value:"ConnectionManager",id:"connectionmanager",level:2},{value:"Simple ConnectionManager",id:"simple-connectionmanager",level:3},{value:"ConnectionManager under Spring transaction management",id:"connectionmanager-under-spring-transaction-management",level:3},{value:"Dialect",id:"dialect",level:2},{value:"Executor",id:"executor",level:2},{value:"Log SQL and its parameters",id:"log-sql-and-its-parameters",level:3},{value:"Collect slow SQL for improvement",id:"collect-slow-sql-for-improvement",level:3},{value:"ScalarProvider",id:"scalarprovider",level:2},{value:"Custom ScalarProvider",id:"custom-scalarprovider",level:3},{value:"Built-in ScalarProvider",id:"built-in-scalarprovider",level:3},{value:"IdGenerator",id:"idgenerator",level:2},{value:"DefaultBatchSize and DefaultListBatchSize",id:"defaultbatchsize-and-defaultlistbatchsize",level:2},{value:"Cache",id:"cache",level:2}],g={toc:d};function k(e){var n=e.components,t=(0,l.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"SqlClient is the entry point jimmer-sql API."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If you want to use jimmer's spring-boot-starter and spring-data-jimmer to simplify usage without creating SqlClient yourself, you don't need to read this document.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"For java, it is ",(0,i.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.sql.JSqlClient")),(0,i.kt)("li",{parentName:"ul"},"For kotlin, it is ",(0,i.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.sql.kt.KqlClient")))),(0,i.kt)("h2",{id:"create-sqlclient"},"Create SqlClient"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    ...doSomething...\n    .builde();\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"val sqlClient = newKSqlClient {\n    ...doSomething...\n}\n")))),(0,i.kt)("p",null,"SqlClient requires an instance and should be shared globally."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If Spring is not used, it should be shared via static variables.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If Spring is used, it should be used as a Spring singleton bean object."))),(0,i.kt)("p",null,"There is no doubt that using Spring/SpringBoot is a fixed pattern for almost all server-side programs."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Configuration\npublic class SqlClientConfig {\n\n    @Bean\n    public JSqlClient sqlClient() {\n        return JSqlClient\n            .newBuilder()\n            ...doSomething...\n            .builde();\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Configuration\nclass SqlClientConfig {\n\n    @Bean\n    fun sqlClient(): KSqlClient =\n        newKSqlClient {\n            ...doSomething...\n        }\n}\n")))),(0,i.kt)("p",null,"Then, the SqlClient object can be injected anywhere to use all the features of jimmer-sql."),(0,i.kt)("h2",{id:"connectionmanager"},"ConnectionManager"),(0,i.kt)("p",null,"All executable statements and commands in jimmer-sql inherit from the interface ",(0,i.kt)("inlineCode",{parentName:"p"},"Executable"),"(java) or ",(0,i.kt)("inlineCode",{parentName:"p"},"KExecutable"),"(kotlin)"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Executable.java"',title:'"Executable.java"'},"package org.babyfish.jimmer.sql.ast;\n\nimport java.sql.Connection;\n\npublic interface Executable<R> {\n\n    R execute();\n\n    R execute(Connection con);\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="KExecutable.kt"',title:'"KExecutable.kt"'},"package org.babyfish.jimmer.sql.kt\n\nimport java.sql.Connection\n\ninterface KExecutable<R> {\n    fun execute(con: Connection? = null): R\n}\n")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"execute(Connection)"),": Execution based on user-specified JDBC connection."),(0,i.kt)("p",{parentName:"li"},"Take the query as an example:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(book)\n    // highlight-next-line\n    .execute(con);\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(con: Connection): List<Book> =\n    sqlClient\n        .createQuery(Book::class) -> {\n            select(table)\n        }\n        // highlight-next-line\n        .execute(con)\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"execute()")," or execute(null): Execution based on automatically acquired JDBC connection."),(0,i.kt)("p",{parentName:"li"},"Take the query as an example:"),(0,i.kt)("p",{parentName:"li"},"Take the query as an example:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public List<Book> findBooks() {\n    BookTable book = BookTable.$;\n\n    List<Book> books = sqlClient\n        .createQuery(book)\n        .select(book)\n        // highlight-next-line\n        .execute();\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(): List<Book> =\n    sqlClient\n        .createQuery(Book::class) -> {\n            select(table)\n        }\n        // highlight-next-line\n        .execute()\n")))))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"To use the first way, no special configuration of SqlClient is required."),(0,i.kt)("p",{parentName:"admonition"},"To use the second way, the ConnectionManager must be configured for SqlClient. Otherwise an exception will be thrown."),(0,i.kt)("p",{parentName:"admonition"},"The second way is recommended, so ConnectionManager is necessary.")),(0,i.kt)("h3",{id:"simple-connectionmanager"},"Simple ConnectionManager"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"javax.sql.DataSource dataSource = ...;\n\nJSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setConnectionManager(\n        ConnectionManager\n            // highlight-next-line\n            .simpleConnectionManager(dataSource)\n    )\n    .builde();\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"javax.sql.DataSource dataSource = ...;\n\nvar sqlClient = newKSqlClient {\n    setConnectionManager {\n        ConnectionManager\n            dataSoruce.connection.use {\n                // highlight-next-line\n                proceed(it)\n            }\n    }\n}\n")))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"This way is only responsible for obtaining connections from DataSource without transaction management."),(0,i.kt)("p",{parentName:"admonition"},"The next way is recommended.")),(0,i.kt)("h3",{id:"connectionmanager-under-spring-transaction-management"},"ConnectionManager under Spring transaction management"),(0,i.kt)("p",null,"When you use spring, you can implement it based on ",(0,i.kt)("inlineCode",{parentName:"p"},"org.springframework.jdbc.datasource.DataSourceUtils"),", you can get the connection with spring transaction management by it."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic JSqlClient sqlClient(DataSource dataSource) {\n    return JSqlClient.newBuilder()\n        .setConnectionManager(\n            new ConnectionManager() {\n                @Override\n                public <R> R execute(\n                    Function<Connection, R> block\n                ) {\n                    Connection con = DataSourceUtils\n                        // highlight-next-line\n                        .getConnection(dataSource);\n                    try {\n                        return block.apply(con);\n                    } finally {\n                        DataSourceUtils\n                            // highlight-next-line\n                            .releaseConnection(con, dataSource);\n                    }\n                }\n            }\n        )\n        .build();\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\nfun sqlClient(dataSource: DataSource): KSqlClient =\n    newKSqlClient {\n        setConnectionManager {\n            val con = DataSourceUtils\n                // highlight-next-line\n                .getConnection(dataSource)\n            try {\n                proceed(con)\n            } finally {\n                DataSourceUtils\n                    // highlight-next-line\n                    .releaseConnection(con, dataSource)\n            }\n        }\n    }\n")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Let jimmer-sql be managed by Spring transactions is the recommended usage.")),(0,i.kt)("h2",{id:"dialect"},"Dialect"),(0,i.kt)("p",null,"As with most ORMs, different dialects need to be set for different databases. The dialects supported so far are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.dialect.H2Dialect"),(0,i.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.dialect.MySqlDialect"),(0,i.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.dialect.PostgresDialect"),(0,i.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.dialect.OracleDialect"),(0,i.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.dialect.SqlServerDialect")),(0,i.kt)("p",null,"Taking H2 as an example, the dialect is set as follows"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic JSqlClient sqlClient() {\n    return JSqlClient\n        .newBuilder()\n        .setConnectionManager(...)\n        // highlight-next-line\n        .setDialect(new H2Dialect())\n        .build();\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\nfun sqlClient(): KSqlClient =\n    newKSqlClient {\n        setConnectionManager { ... }\n        // highlight-next-line\n        setDialect(H2Dialect())\n    }\n")))),(0,i.kt)("h2",{id:"executor"},"Executor"),(0,i.kt)("p",null,"Executor is the entry point for jimmer-sql to execute the final SQL and acts as an interceptor for SQL execution."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Setting the Executor is optional.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Executor.java"',title:'"Executor.java"'},"package org.babyfish.jimmer.sql.runtime;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.util.List;\n\npublic interface Executor {\n\n    <R> R execute(\n            Connection con,\n            String sql,\n            List<Object> variables,\n            ExecutionPurpose purpose,\n            StatementFactory factory,\n            SqlFunction<PreparedStatement, R> block\n    );\n}\n")),(0,i.kt)("p",null,"This interface has only one method ",(0,i.kt)("inlineCode",{parentName:"p"},"execute")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"con"),": SQL is executed based on this connection")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sql"),": SQL statement to be executed")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"variables"),": JDBC parameters attached to the SQL to be executed"),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Note:"),(0,i.kt)("p",{parentName:"blockquote"},"The list does not contain null values, all null values are pre-replaced with objects of type ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.runtime.DbNull"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"purpose"),": The purpose of the SQL.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"factory"),": How to create JDBC prepared statement.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"block"),": Substantial operation to be performed."),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Note:"),(0,i.kt)("p",{parentName:"blockquote"},"Do not call ",(0,i.kt)("inlineCode",{parentName:"p"},"block")," directly in a custom Executor, instead call the method ",(0,i.kt)("inlineCode",{parentName:"p"},"execute")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.runtime.DefaultExecutor"),".")))),(0,i.kt)("p",null,"The default ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultExecutor")," is already capable of all jobs, so specifying a custom Exector is optional."),(0,i.kt)("p",null,"If you encounter one of the following scenarios, you can specify a custom Executor to override the default DefaultExecutor."),(0,i.kt)("h3",{id:"log-sql-and-its-parameters"},"Log SQL and its parameters"),(0,i.kt)("p",null,"There are two ways to achieve this functionality"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Convenient way"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Configuration\npublic class SqlClientConfig {\n\n    private static final Logger LOGGER = \n        LoggerFactory.getLogger(SqlClientConfig.class);\n\n    @Bean\n    public JSqlClient sqlClient() {\n        return JSqlClient\n            .newBuilder()\n            .setConnectionManager(...)\n            .setDialect(new H2Dialect())\n            // highlight-next-line\n            .setExecutor(Executor.log())\n            .build();\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Configuration\nclass SqlClientConfig {\n\n    @Bean\n    fun sqlClient() = \n        newKSqlClient {\n            setConnectionManager { ... }\n            setDialect(H2Dialect())\n            // highlight-next-line\n            setExecutor(Executor.log())\n        }\n}\n\nprivate val LOGGER = \n    LoggerFactory.getLogger(SqlClientConfig::class.java)\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Controllable way"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Configuration\npublic class SqlClientConfig {\n\n    private static final Logger LOGGER = \n        LoggerFactory.getLogger(SqlClientConfig.class);\n\n    @Bean\n    public JSqlClient sqlClient() {\n        return JSqlClient\n            .newBuilder()\n            .setConnectionManager(...)\n            .setDialect(new H2Dialect())\n            // highlight-next-line\n            .setExecutor(\n                new Executor() {\n                    @Override\n                    public <R> R execute(\n                            Connection con,\n                            String sql,\n                            List<Object> variables,\n                            ExecutionPurpose purpose,\n                            StatementFactory factory,\n                            SqlFunction<PreparedStatement, R> block\n                    ) {\n                        // Log SQL and variables.\n                        LOGGER.info(\n                            "Execute sql : \\"{}\\", " +\n                            ", variables: {}, purpose: {}", \n                            sql, \n                            variables,\n                            purpose\n                        );\n                        // Call DefaultExecutor\n                        // highlight-next-line\n                        return DefaultExecutor\n                            .INSTANCE\n                            .execute(\n                                con,\n                                sql,\n                                variables,\n                                purpose,\n                                factory,\n                                block\n                            );\n                    }\n                }\n            )\n            .build();\n    }\n}\n'))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Configuration\nclass SqlClientConfig {\n\n    @Bean\n    fun sqlClient() = \n        newKSqlClient {\n            setConnectionManager { ... }\n            setDialect(H2Dialect())\n            // highlight-next-line\n            setExecutor {\n                // Log SQL and variables.\n                LOGGER.info(\n                    "Execute sql : \\"{}\\", " +\n                    "with variables: {}, purpose: {}", \n                    sql, \n                    variables,\n                    purpose\n                );\n                // Call DefaultExecutor\n                // highlight-next-line\n                proceed()\n            }\n        }\n}\n\nprivate val LOGGER = \n    LoggerFactory.getLogger(SqlClientConfig::class.java)\n')))))),(0,i.kt)("h3",{id:"collect-slow-sql-for-improvement"},"Collect slow SQL for improvement"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Configuration\npublic class SqlClientConfig {\n\n    private static final Logger LOGGER = \n        LoggerFactory.getLogger(SqlClientConfig.class);\n\n    @Bean\n    public JSqlClient sqlClient() {\n        return JSqlClient\n            .newBuilder()\n            .setConnectionManager(...)\n            .setDialect(new H2Dialect())\n            // highlight-next-line\n            .setExecutor(\n                new Executor() {\n                    @Override\n                    public <R> R execute(\n                            Connection con,\n                            String sql,\n                            List<Object> variables,\n                            ExecutionPurpose purpose,\n                            StatementFactory factory,\n                            SqlFunction<PreparedStatement, R> block\n                    ) {\n                        long millis = System.currentTimeMillis();\n                        // Call DefaultExecutor\n                        // highlight-next-line\n                        R result = DefaultExecutor\n                            .INSTANCE\n                            .execute(\n                                con,\n                                sql,\n                                variables,\n                                purpose,\n                                factory,\n                                block\n                            );\n                        millis = System.currentTimeMillis() - millis;\n                        if (millis > 1000) { // Slow SQL\n                            ...sendMessageToTechTeam...\n                        }\n                        return result;\n                    }\n                }\n            )\n            .build();\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Configuration\nclass SqlClientConfig {\n\n    @Bean\n    fun sqlClient(): KSqlClient = \n        newKSqlClient {\n            setConnectionManager { ... }\n            setDialect(H2Dialect())\n            // highlight-next-line\n            setExecutor {\n                val millis = System.currentTimeMillis()\n                // Call DefaultExecutor\n                // highlight-next-line\n                proceed()\n                millis = System.currentTimeMillis() - millis\n                if (millis > 1000) { // Slow SQL\n                    ...sendMessageToTechTeam...\n                }\n            }\n        }\n}\n\nprivate val LOGGER = \n    LoggerFactory.getLogger(SqlClientConfig::class.java)\n")))),(0,i.kt)("h2",{id:"scalarprovider"},"ScalarProvider"),(0,i.kt)("p",null,"Multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"ScalarProvider"),"s can be added to JSqlClient, each ",(0,i.kt)("inlineCode",{parentName:"p"},"ScalarProvider")," tells jimmer how to handle a custom data type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ScalarProvider")," is defined as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ScalarProvider"',title:'"ScalarProvider"'},"package org.babyfish.jimmer.sql.runtime;\n\nimport java.util.function.Consumer;\n\npublic abstract class ScalarProvider<T, S> {\n\n    protected ScalarProvider(Class<T> scalarType, Class<S> sqlType) {\n        this.scalarType = scalarType;\n        this.sqlType = sqlType;\n    }\n\n    public abstract T toScalar(S sqlValue);\n\n    public abstract S toSql(T scalarValue);\n }\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Generic parameter ",(0,i.kt)("inlineCode",{parentName:"li"},"T"),": data type in Java"),(0,i.kt)("li",{parentName:"ul"},"Generic parameter ",(0,i.kt)("inlineCode",{parentName:"li"},"S"),": data type in the database"),(0,i.kt)("li",{parentName:"ul"},"Method ",(0,i.kt)("inlineCode",{parentName:"li"},"toScalar"),": Convert the non-null data read from the database to Java data"),(0,i.kt)("li",{parentName:"ul"},"Method ",(0,i.kt)("inlineCode",{parentName:"li"},"toSql"),": converts non-null java data to the data that can be accepted by database")),(0,i.kt)("h3",{id:"custom-scalarprovider"},"Custom ScalarProvider"),(0,i.kt)("p",null,"For example, if current database does not support the UUID type, it can be handled like this"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic JSqlClient sqlClient() {\n    return JSqlClient\n        .newBuilder()\n        .setConnectionManager(...)\n        .setDialect(new H2Dialect())\n        .setExecutor(...)\n        // highlight-next-line\n        .addScalarProvider(\n            new ScalarProvider<>(\n                UUID.class,\n                String.class\n            ) {\n                @Override\n                public UUID toScalar(String sqlValue) {\n                    return UUID.fromString(sqlValue);\n                }\n\n                @Override\n                public String toSql(UUID scalarValue) {\n                    return scalarValue.toString();\n                }\n            }\n        )\n        .build();\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\nfun sqlClient() : KSqlClient = \n    newKSqlClient {\n        setConnectionManager { ... }\n        setDialect(H2Dialect())\n        setExecutor { ... }\n        // highlight-next-line\n        addScalarProvider(\n            object: ScalarProvider(\n                UUID.class,\n                String.class\n            ) {\n                override fun toScalar(sqlValue: Strng): UUID =\n                    UUID.fromString(sqlValue)\n\n                override fun toSql(scalarValue: UUID): String =\n                    scalarValue.toString()\n            }\n        )\n    }\n")))),(0,i.kt)("h3",{id:"built-in-scalarprovider"},"Built-in ScalarProvider"),(0,i.kt)("p",null,"jimmer-sql has built-in ScalarProvider for enum."),(0,i.kt)("p",null,"Suppose there is an enum type:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="GcObjColor.java"',title:'"GcObjColor.java"'},"public enum GcObjColor { \n    WHITE, \n    GRAY, \n    BLACK \n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="GcObjColor.kt"',title:'"GcObjColor.kt"'},"enum class GcObjColor { \n    WHITE, \n    GRAY, \n    BLACK \n}\n")))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Maps to strings by enum's ",(0,i.kt)("inlineCode",{parentName:"p"},"name()")),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"return JSqlBuilder\n    .newBuilder()\n    .addScalarProvider(\n        // highlight-next-line\n        ScalarProvider.enumProviderByString(\n            GcObjColor.class\n        )\n    )\n    ...doOtherthings...\n    .build();\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"return newKSqlClient {\n    addScalarProvider(\n        // highlight-next-line\n        ScalarProvider.enumProviderByString(\n            GcObjColor::class.java\n        )\n    )\n    ...doOtherthings...\n}\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Maps to string as enum's ",(0,i.kt)("inlineCode",{parentName:"p"},"name()"),", but maps ",(0,i.kt)("inlineCode",{parentName:"p"},"GRAY")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"GREY")),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'return JSqlBuilder\n    .newBuilder()\n    .addScalarProvider(\n        ScalarProvider.enumProviderByString(\n            GcObjColor.class, \n            // highlight-next-line\n            it -> it.map(GcObjColor.GRAY, "GREY")\n        )\n    )\n    ...doOtherthings...\n    .build();\n'))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'return newKSqlClient {\n    addScalarProvider(\n        ScalarProvider.enumProviderByString(\n            GcObjColor::class.java\n        ) {\n            // highlight-next-line\n            it.map(GcObjColor.GRAY, "GREY")\n        }\n    )\n    ...doOtherthings...\n}\n'))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Maps to integers by enum's ",(0,i.kt)("inlineCode",{parentName:"p"},"ordinal()")),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"return SqlBuilder\n    .newBuilder()\n    .addScalarProvider(\n        // highlight-next-line\n        ScalarProvider.enumProviderByInt(\n            GcObjColor.class\n        )\n    )\n    ...doOtherthings...\n    .build();\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"return newKSqlClient {\n    addScalarProvider(\n        // highlight-next-line\n        ScalarProvider.enumProviderByInt(\n            GcObjColor::class.java\n        )\n    )\n    ...doOtherthings...\n}\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Maps to integers as enum's ",(0,i.kt)("inlineCode",{parentName:"p"},"ordinal()"),", but maps ",(0,i.kt)("inlineCode",{parentName:"p"},"BLACK")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),(0,i.kt)("em",{parentName:"p"},"(default is 2)")),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"return JSqlBuilder\n    .newBuilder()\n    .addScalarProvider(\n        ScalarProvider.enumProviderByInt(\n            GcObjColor.class, \n            // highlight-next-line\n            it -> it.map(GcObjColor.GRAY, 3)\n        )\n    )\n    ...doOtherthings...\n    .build();\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"return newKSqlClient {\n    addScalarProvider(\n        ScalarProvider.enumProviderByInt(\n            GcObjColor::class.java\n        ) {\n            // highlight-next-line\n            it.map(GcObjColor.GRAY, 3)\n        }\n    )\n    ...doOtherthings...\n}\n")))))),(0,i.kt)("h2",{id:"idgenerator"},"IdGenerator"),(0,i.kt)("p",null,"The id generation strategy for objects can be set dynamically."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Normally, the id generation strategy should be statically configured in the entity interface using the annotation ",(0,i.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.sql.GeneratedValue"),", you can refer to ",(0,i.kt)("a",{parentName:"p",href:"./mapping#generatedvalue"},"mapping")," for more information."),(0,i.kt)("p",{parentName:"admonition"},"However, we can dynamically specify the id generator in SqlClient?"),(0,i.kt)("p",{parentName:"admonition"},"The dynamic configuration can override the annotation's static configuration.")),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UnitTestIdGenerator.java"',title:'"UnitTestIdGenerator.java"'},"public class UnitTestIdGenerator implements UserIdGenerator {\n\n    private final Iterator<Object> preAllocatedIdItr;\n    \n    public UnitTestIdGenerator(Object ... preAllocatedIds) {\n        preAllocatedIdItr = Arrays\n                .asList(preAllocatedIds)\n                .iterator();\n    }\n\n    @Override\n    public Object generate(Class<?> entityType) {\n        return preAllocatedIdItr.next();\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="UnitTestIdGenerator.kt"',title:'"UnitTestIdGenerator.kt"'},"class UnitTestIdGenerator(\n    vararg preAllocatedIds Any\n) : UserIdGenerator {\n    \n    private val preAllocatedIdItr = preAllocatedIds.iterator()\n    \n    override fun generate(entityType: Class<*>): Any =\n        preAllocatedIdItr.next()\n}\n")))),(0,i.kt)("p",null,"You can use it like this"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyTest.java"',title:'"MyTest.java"'},"public class MyTest {\n\n    private JSqlClient sqlClient;\n\n    @BeforeEach\n    public void init() {\n        sqlClient = JSqlClient\n            .newBuilder()\n            // highlight-next-line\n            .setIdGenerator(\n                Department.class,\n                new UnitTestIdGenerator(51L, 52L, 53L)\n            )\n            // highlight-next-line\n            .setIdGenerator(\n                Employee.class,\n                new UnitTestIdGenerator(100L, 101L)\n            )\n            // highlight-next-line\n            .setIdGenerator(\n                // For other entity types\n                new UnitTestIdGenerator(1L, 2L, 3L, 4L)\n            )\n            .build();\n    }\n\n    @Test\n    public void test() {\n        // TODO: Add unit test code here\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyTest.kt"',title:'"MyTest.kt"'},"class MyTest {\n\n    private lateinit var sqlClient: KSqlClient\n\n    @Before\n    fun init() {\n        sqlClient = newKSqlClient {\n            // highlight-next-line\n            setIdGenerator(\n                Department::class,\n                new UnitTestIdGenerator(51L, 52L, 53L)\n            )\n            // highlight-next-line\n            setIdGenerator(\n                Employee::class,\n                new UnitTestIdGenerator(100L, 101L)\n            )\n            // highlight-next-line\n            setIdGenerator(\n                // For other entity types\n                new UnitTestIdGenerator(1L, 2L, 3L, 4L)\n            )\n        }\n    }\n\n    @Test\n    fun test() {\n        // TODO: Add unit test code here\n    }\n}\n")))),(0,i.kt)("h2",{id:"defaultbatchsize-and-defaultlistbatchsize"},"DefaultBatchSize and DefaultListBatchSize"),(0,i.kt)("p",null,"JSqlClient supports two configurations: ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultBatchSize")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultListBatchSize"),"."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic JSqlClient sqlClient() {\n    return JSqlClient\n        .newBuilder()\n        .setConnectionManager(...)\n        .setDialect(new H2Dialect())\n        .setExecutor(...)\n        .addScalarProvider(...)\n        // highlight-next-line\n        .setDefaultBatchSize(256)\n        // highlight-next-line\n        .setDefaultListBatchSize(32)\n        .build();\n}\n"))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\nfun sqlClient(): KSqlClient = \n    newKSqlClient {\n        setConnectionManager { ... }\n        setDialect(H2Dialect())\n        setExecutor { ... }\n        addScalarProvider { ... }\n        // highlight-next-line\n        setDefaultBatchSize(256)\n        // highlight-next-line\n        setDefaultListBatchSize(32)\n    }\n")))),(0,i.kt)("p",null,"The usage is described in detail in ",(0,i.kt)("a",{parentName:"p",href:"../query/fetcher#batchsize"},"Object Fetcher"),", which will not be repeated in this article."),(0,i.kt)("h2",{id:"cache"},"Cache"),(0,i.kt)("p",null,"SqlClient supports a configuration: ",(0,i.kt)("inlineCode",{parentName:"p"},"setCaches"),", which is used to set caches. "),(0,i.kt)("p",null,"Because there is a separate article discussing cache, this article will not discuss it, please see ",(0,i.kt)("a",{parentName:"p",href:"../advanced/cache"},"external cache"),"."))}k.isMDXComponent=!0}}]);