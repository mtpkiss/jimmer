"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[2056],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=m(t),k=l,c=d["".concat(s,".").concat(k)]||d[k]||p[k]||o;return t?a.createElement(c,i(i({ref:n},u),{},{components:t})):a.createElement(c,i({ref:n},u))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294),l=t(34334),o="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,i),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return k}});var a=t(83117),l=t(67294),o=t(34334),i=t(72389),r=t(67392),s=t(7094),m=t(12466),u="tabList__CuJ",p="tabItem_LNqP";function d(e){var n,t,i=e.lazy,d=e.block,k=e.defaultValue,c=e.values,y=e.groupId,b=e.className,v=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=c?c:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),T=(0,r.l)(g,(function(e,n){return e.value===n.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===k?k:null!=(n=null!=k?k:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:v[0].props.value;if(null!==f&&!g.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),h=N.tabGroupChoices,I=N.setTabGroupChoices,j=(0,l.useState)(f),B=j[0],O=j[1],E=[],C=(0,m.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var x=h[y];null!=x&&x!==B&&g.some((function(e){return e.value===x}))&&O(x)}var S=function(e){var n=e.currentTarget,t=E.indexOf(n),a=g[t].value;a!==B&&(C(n),O(a),null!=y&&I(y,String(a)))},w=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,l=E.indexOf(e.currentTarget)+1;t=null!=(a=E[l])?a:E[0];break;case"ArrowLeft":var o,i=E.indexOf(e.currentTarget)-1;t=null!=(o=E[i])?o:E[E.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},b)},g.map((function(e){var n=e.value,t=e.label,i=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:B===n?0:-1,"aria-selected":B===n,key:n,ref:function(e){return E.push(e)},onKeyDown:w,onFocus:S,onClick:S},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":B===n})}),null!=t?t:n)}))),i?(0,l.cloneElement)(v.filter((function(e){return e.props.value===B}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==B})}))))}function k(e){var n=(0,i.Z)();return l.createElement(d,(0,a.Z)({key:String(n)},e))}},59510:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return k}});var a=t(83117),l=t(80102),o=(t(67294),t(3905)),i=t(65488),r=t(85162),s=["components"],m={sidebar_position:2,title:"Mapping"},u=void 0,p={unversionedId:"jimmer-sql/basic/mapping",id:"jimmer-sql/basic/mapping",title:"Mapping",description:"Annotation",source:"@site/docs/jimmer-sql/basic/mapping.mdx",sourceDirName:"jimmer-sql/basic",slug:"/jimmer-sql/basic/mapping",permalink:"/jimmer/docs/jimmer-sql/basic/mapping",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/basic/mapping.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Mapping"},sidebar:"tutorialSidebar",previous:{title:"Get started",permalink:"/jimmer/docs/jimmer-sql/basic/usage"},next:{title:"SqlClient",permalink:"/jimmer/docs/jimmer-sql/basic/sql-client"}},d={},k=[{value:"Annotation",id:"annotation",level:2},{value:"Entity",id:"entity",level:2},{value:"Table",id:"table",level:2},{value:"Transient",id:"transient",level:2},{value:"Id",id:"id",level:2},{value:"GeneratedValue",id:"generatedvalue",level:2},{value:"generatorType",id:"generatortype",level:3},{value:"2. IDENTITY",id:"2-identity",level:3},{value:"3. SEQUENCE",id:"3-sequence",level:3},{value:"Version",id:"version",level:2},{value:"ManyToOne",id:"manytoone",level:2},{value:"1. Based on foreign key",id:"1-based-on-foreign-key",level:3},{value:"2. Base on middle table",id:"2-base-on-middle-table",level:3},{value:"OneToOne",id:"onetoone",level:2},{value:"1. Base one foreign key",id:"1-base-one-foreign-key",level:3},{value:"2. Based on middle table",id:"2-based-on-middle-table",level:3},{value:"As slave side",id:"as-slave-side",level:3},{value:"OneToMany",id:"onetomany",level:2},{value:"ManyToMany",id:"manytomany",level:2},{value:"1. Used as master side",id:"1-used-as-master-side",level:3},{value:"2. Used as the slave side",id:"2-used-as-the-slave-side",level:3},{value:"Key",id:"key",level:2},{value:"OnDissociate",id:"ondissociate",level:2}],c={toc:k};function y(e){var n=e.components,t=(0,l.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"annotation"},"Annotation"),(0,o.kt)("p",null,"Jimmer-sql uses these annotations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.Entity"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.Table"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.Transient"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.Id"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.GeneratedValue"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.Version"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.Column"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.JoinColumn"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.JoinTable"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.OneToOne"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.ManyToOne"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.OneToMany"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.ManyToMany"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.Key"),(0,o.kt)("li",{parentName:"ul"},"org.babyfish.jimmer.sql.OnDissociate ")),(0,o.kt)("h2",{id:"entity"},"Entity"),(0,o.kt)("p",null,"The annotation ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," is used to decorate an immutable interface, representing an ORM entity."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Once ",(0,o.kt)("inlineCode",{parentName:"p"},"@Entity")," is used, it is implied that the interface is immutable, no need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.Immutable"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In java, ",(0,o.kt)("inlineCode",{parentName:"p"},"@Immutable")," can specify the default nullability of the properties, so ",(0,o.kt)("inlineCode",{parentName:"p"},"@Entity")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@Immutable")," can be mixed. ")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In kotlin, you should never use both ",(0,o.kt)("inlineCode",{parentName:"p"},"@Entity")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@Immutable"),", because kotlin can declare the nullity of properites clearly. ")))),(0,o.kt)("h2",{id:"table"},"Table"),(0,o.kt)("p",null,"By default, the table name can be deduced from the interface name without using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Table")," annotation."),(0,o.kt)("p",null,"The default table name uses all uppercase letters. Every place where the original name is switched from lowercase letter to uppercase letter will automatically add an underscore. For example, the interface name ",(0,o.kt)("inlineCode",{parentName:"p"},"BookStore")," will automatically deduce the table name ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOK_STORE"),"."),(0,o.kt)("p",null,"If the default table name does not meet your requirements, please use ",(0,o.kt)("inlineCode",{parentName:"p"},"@Tabale")," to specify your table name."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStore.java"',title:'"BookStore.java"'},'@Entity\n@Table("MY_BOOK_STORE")\npublic interface BookStore {\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStore.kt"',title:'"BookStore.kt"'},'@Entity\n@Table("MY_BOOK_STORE")\ninterface BookStore {\n    ...\n}\n')))),(0,o.kt)("h2",{id:"transient"},"Transient"),(0,o.kt)("p",null,"Indicates that a property does not need to be persisted."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Once the parameter is specified for the annotation ",(0,o.kt)("inlineCode",{parentName:"p"},"@Transient"),", it becomes ",(0,o.kt)("strong",{parentName:"p"},"calculated property"),", please view ",(0,o.kt)("a",{parentName:"p",href:"../advanced/calculated-prop"},"here")," to know more.")),(0,o.kt)("h2",{id:"id"},"Id"),(0,o.kt)("p",null,"Declare a property as an id property, like this"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @Id\n    long id();\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    // highlight-next-line\n    @Id\n    val id: Long\n}\n")))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Id property must be non-null"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"For java, it cannot be box type of 8 primtivie types"),(0,o.kt)("li",{parentName:"ul"},"For kotlin, it cannot be nullable type."))),(0,o.kt)("p",null,"By default, the column name of the id column is derived from the Java property name."),(0,o.kt)("p",null,"By default all scalar column names use uppercase letters, and an underscore is automatically added wherever the original name is switched from lowercase letter to uppercase letter. The corresponding database column name here is ID."),(0,o.kt)("h2",{id:"generatedvalue"},"GeneratedValue"),(0,o.kt)("h3",{id:"generatortype"},"generatorType"),(0,o.kt)("p",null,'The annotation has an attribute named "generatorType", it must be an type of ',(0,o.kt)("inlineCode",{parentName:"p"},"IdGenerator")," if it is specified."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"IdGenerator")," tells jimmer-sql how to insert objects without an id, which is defined as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="IdGenerator"',title:'"IdGenerator"'},"package org.babyfish.jimmer.sql.meta;\npublic interface IdGenerator {}\n")),(0,o.kt)("p",null,"Except ",(0,o.kt)("inlineCode",{parentName:"p"},"IdentityGenerator")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SequenceGenerator"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"IdGenerator")," interface has a typical implementation: ",(0,o.kt)("inlineCode",{parentName:"p"},"UserIdGenerator"),". That means let user to write code that determines how the id is automatically generated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UserIdGenerator.java"',title:'"UserIdGenerator.java"'},"package org.babyfish.jimmer.sql.meta;\n\npublic interface UserIdGenerator extends IdGenerator {\n\n    Object generate(Class<?> entityType);\n}\n")),(0,o.kt)("p",null,"In particular, when the id is of type UUID, jimmer-sql provides a class called ",(0,o.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.meta.UUIDIdGenerator")," for generating UUIDs randomly"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(generateType = UUIDIdGenerator.class)\n    UUID id();\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(generateType = UUIDIdGenerator::class)\n    val id: UUID\n}\n")))),(0,o.kt)("p",null,"If you want to use snowflake id, you need to implement the interface ",(0,o.kt)("inlineCode",{parentName:"p"},"UserIdGenerator")," by yourself, like this"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="SnowflakeIdGenerator.java"',title:'"SnowflakeIdGenerator.java"'},"public class SnowflakeIdGenerator implements UserIdGenerator {\n    @Override\n    public Long generate() {\n        // Please call some third-party library \n        // to generate 64-bit snowflake id\n    }\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="SnowflakeIdGenerator.kt"',title:'"SnowflakeIdGenerator.kt"'},"class SnowflakeIdGenerator : UserIdGenerator {\n    override fun generate(): Long {\n        // Please call some third-party library \n        // to generate 64-bit snowflake id\n    }\n}\n")))),(0,o.kt)("p",null,"Finally, you can use it like this"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(generateType = SnowflakeIdGenerator.class)\n    long id();\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(generateType = SnowflakeIdGenerator.class)\n    val id: Long\n}\n")))),(0,o.kt)("h3",{id:"2-identity"},"2. IDENTITY"),(0,o.kt)("p",null,"Use identity id/auto incremenet id of database"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(generatorType = IdentityGenerator::class)\n    long id();\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(generatorType = IdentityGenerator::class)\n    val id: Long\n}\n")))),(0,o.kt)("p",null,"or"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    long id();\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    val id: Long\n}\n")))),(0,o.kt)("h3",{id:"3-sequence"},"3. SEQUENCE"),(0,o.kt)("p",null,"Use sequence of database."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(\n        generatorType = SequenceGenerator::class,\n        sequenceName = "BOOK_ID_SEQ" // sequenceName is optional\n    )\n    long id();\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(\n        generatorType = SequenceGenerator::class,\n        sequenceName = "BOOK_ID_SEQ" // sequenceName is optional\n    )\n    val id: Long\n}\n')))),(0,o.kt)("p",null,"or"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(\n        strategy = GenerationType.SEQUENCE,\n        sequenceName = "BOOK_ID_SEQ" // sequenceName is optional\n    )\n    long id();\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(\n        strategy = GenerationType.SEQUENCE,\n        sequenceName = "BOOK_ID_SEQ" // sequenceName is optional\n    )\n    val id: Long\n}\n')))),(0,o.kt)("p",null,"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"sequenceName")," is not specified, the default value is ",(0,o.kt)("inlineCode",{parentName:"p"},'table name + "_ID_SEQ"')),(0,o.kt)("h2",{id:"version"},"Version"),(0,o.kt)("p",null,"Specifies the optimistic locking version property of the entity"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Version\n    int version();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @Version\n    val version: Int\n\n    ...\n}\n")))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note:"),(0,o.kt)("p",{parentName:"admonition"},"The version field must be non-null int type, ",(0,o.kt)("inlineCode",{parentName:"p"},"java.lang.Integer")," of java or ",(0,o.kt)("inlineCode",{parentName:"p"},"Int?")," of kotlin are invalid.")),(0,o.kt)("h2",{id:"manytoone"},"ManyToOne"),(0,o.kt)("p",null,"There are two ways to implement many-to-one associations, based on foreign key and based on middle table."),(0,o.kt)("h3",{id:"1-based-on-foreign-key"},"1. Based on foreign key"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Null\n    @ManyToOne\n    BookStore store();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @ManyToOne\n    val store: BookStore?\n}\n")))),(0,o.kt)("p",null,"Here, the foreign key column name is not explicitly specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinColumn"),", and the default column name is used."),(0,o.kt)("p",null,'The default column name uses all uppercase letters, every place where the Java property name is switched from lowercase letter to uppercase letter will automatically add an underscore, and finally append the suffix "_ID".'),(0,o.kt)("p",null,"Here, the many-to-one attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"store")," will automatically deduce the foreign key column name ",(0,o.kt)("inlineCode",{parentName:"p"},"STORE_ID"),"."),(0,o.kt)("p",null,"It can also be used with ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinColum")," with the explicit column name."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    @Null\n    @ManyToOne\n    @JoinColumn(name = "BOOK_STORE_ID")\n    BookStore store();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    @ManyToOne\n    @JoinColumn(name = "BOOK_STORE_ID")\n    val store: BookStore?\n}\n')))),(0,o.kt)("h3",{id:"2-base-on-middle-table"},"2. Base on middle table"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Null\n    @ManyToOne\n    @JoinTable\n    BookStore store();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @ManyToOne\n    @JoinTable\n    val store: BookStore?\n\n    ...\n}\n")))),(0,o.kt)("p",null,"Here, no annotation properties are specified for ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinTable"),", the default properties are as follows"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name"),": BOOK_STORE_MAPPING."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"joinColumnName"),": BOOK_ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inverseJoinColumnName"),": STORE_ID.")),(0,o.kt)("p",null,"You can also specify them explicitly"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    @Null\n    @ManyToOne\n    @JoinTable(\n        name = "BOOK_STORE_MAPPING",\n        joinColumnName = "BOOK_ID",\n        inverseJoinColumnName = "STORE_ID"\n    )\n    BookStore store();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    @ManyToOne\n    @JoinTable(\n        name = "BOOK_STORE_MAPPING",\n        joinColumnName = "BOOK_ID",\n        inverseJoinColumnName = "STORE_ID"\n    )\n    val store: BookStore?\n\n    ...\n}\n')))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The many-to-one association based on the middle table must be nullable. ")),(0,o.kt)("h2",{id:"onetoone"},"OneToOne"),(0,o.kt)("p",null,"There are three ways to achieve a one-to-one association:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As master side: based on foreign key"),(0,o.kt)("li",{parentName:"ul"},"As master side: based on middle table"),(0,o.kt)("li",{parentName:"ul"},"As slave side")),(0,o.kt)("h3",{id:"1-base-one-foreign-key"},"1. Base one foreign key"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Address.java"',title:'"Address.java"'},"@Entity\npublic interface Address {\n\n    @Null\n    @OneToOne\n    Customer customer();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Address.kt"',title:'"Address.kt"'},"@Entity\ninterface Address {\n\n    @OneToOne\n    val customer: Customer?\n}\n")))),(0,o.kt)("p",null,"Here, the foreign key column name is not explicitly specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinColumn"),", and the default column name is used."),(0,o.kt)("p",null,'The default column name uses all uppercase letters, every place where the Java property name is switched from lowercase letter to uppercase letter will automatically add an underscore, and finally append the suffix "_ID".'),(0,o.kt)("p",null,"Here, the many-to-one attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"customer")," will automatically deduce the foreign key column name ",(0,o.kt)("inlineCode",{parentName:"p"},"CUSTOMER_ID"),"."),(0,o.kt)("p",null,"It can also be used with ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinColum")," with the explicit column name."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Address.java"',title:'"Address.java"'},'@Entity\npublic interface Address {\n\n    @Null\n    @OneToOne\n    @JoinColumn(name = "CUSTOMER_ID")\n    Customer customer();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Address.kt"',title:'"Address.kt"'},'@Entity\ninterface Address {\n\n    @OneToOne\n    @JoinColumn(name = "CUSTOMER_ID")\n    val customer: Customer?\n}\n')))),(0,o.kt)("h3",{id:"2-based-on-middle-table"},"2. Based on middle table"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Address.java"',title:'"Address.java"'},"@Entity\npublic interface Address {\n\n    @Null\n    @OneToOne\n    @JoinTable\n    Customer customer();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Address.kt"',title:'"Address.kt"'},"@Entity\ninterface Address {\n\n    @OneToOne\n    @JoinTable\n    val customer: Customer?\n\n    ...\n}\n")))),(0,o.kt)("p",null,"Here, no annotation properties are specified for ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinTable"),", the default properties are as follows"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name"),": ADDRESS_CUSTOMER_MAPPING."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"joinColumnName"),": ADDRESS_ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inverseJoinColumnName"),": CUSTOMER_ID.")),(0,o.kt)("p",null,"You can also specify them explicitly"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Address.java"',title:'"Address.java"'},'@Entity\npublic interface Address {\n\n    @Null\n    @OneToOne\n    @JoinTable(\n        name = "ADDRESS_CUSTOMER_MAPPING",\n        joinColumnName = "ADDRESS_ID",\n        inverseJoinColumnName = "CUSTOMER_ID"\n    )\n    Customer customer();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Address.kt"',title:'"Address.kt"'},'@Entity\ninterface Address {\n\n    @OneToOne\n    @JoinTable(\n        name = "ADDRESS_CUSTOMER_MAPPING",\n        joinColumnName = "ADDRESS_ID",\n        inverseJoinColumnName = "CUSTOM_ID"\n    )\n    val customer: Customer?\n\n    ...\n}\n')))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The one-to-one association based on the middle table must be nullable. ")),(0,o.kt)("h3",{id:"as-slave-side"},"As slave side"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Customer.java"',title:'"Customer.java"'},'@Entity\npublic interface Customer {\n\n    @Null\n    // The mirror of `Address.customer`\n    // highlight-next-line\n    @OneToOne(mappedBy = "customer")\n    Address address();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Customer.kt"',title:'"Customer.kt"'},'@Entity\ninterface Customer {\n\n    @Null\n    // The mirror of `Address.customer`\n    // highlight-next-line\n    @OneToOne(mappedBy = "customer")\n    val address: Address?\n\n    ...\n}\n')))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The slave side of one-to-one association must be nullable. ")),(0,o.kt)("h2",{id:"onetomany"},"OneToMany"),(0,o.kt)("p",null,"one-to-many association must be mirror of many-to-one association. That is, a one-to-many association necessarily implies a bidirectional association."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Customer.java"',title:'"Customer.java"'},'@Entity\npublic interface BookStore {\n\n    // The mirror of `Book.store`\n    // highlight-next-line\n    @OneToMany(mappedBy = "store")\n    List<Book> books();\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStore.kt"',title:'"BookStore.kt"'},'@Entity\ninterface BookStore {\n\n    // The mirror of `Book.store`\n    // highlight-next-line\n    @OneToMany(mappedBy = "store")\n    val books: List<Book>\n    ...\n}\n')))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Collection properties are always treated as non-null.")),(0,o.kt)("h2",{id:"manytomany"},"ManyToMany"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Collection properties are always treated as non-null.")),(0,o.kt)("p",null,"many-to-many associations can be used as the master side, and can also be used as the slave side."),(0,o.kt)("h3",{id:"1-used-as-master-side"},"1. Used as master side"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @ManyToMany\n    @JoinTable\n    List<Author> autors();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @ManyToMany\n    @JoinTable\n    val authors: List<Author>\n\n    ...\n}\n")))),(0,o.kt)("p",null,"Here, no annotation properties are specified for ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinTable"),", the default properties are as follows"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name"),": BOOK_AUTHOR_MAPPING"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"joinColumnName"),": BOOK_ID"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inverseJoinColumnName"),": AUTHOR_ID")),(0,o.kt)("p",null,"You can also specify them explicitly"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    @ManyToMany\n    @JoinTable(\n        name = "BOOK_AUTHOR_MAPPING",\n        joinColumnName = "BOOK_ID",\n        inverseColumnName = "AUTHOR_ID"\n    )\n    List<Author> autors();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    @ManyToMany\n    @JoinTable(\n        name = "BOOK_AUTHOR_MAPPING",\n        joinColumnName = "BOOK_ID",\n        inverseColumnName = "AUTHOR_ID"\n    )\n    val authors: List<Author>\n\n    ...\n}\n')))),(0,o.kt)("h3",{id:"2-used-as-the-slave-side"},"2. Used as the slave side"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Entity title="Author.java"\npublic interface Author {\n\n    // The mirror of `Book.authors`\n    @ManyToMany(mappedBy = "authors")\n    List<Book> books();\n\n    ...\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Entity title="Author.kt"\npublic interface Author {\n\n    // The mirror of `Book.authors`\n    @ManyToMany(mappedBy = "authors")\n    val books: List<Book>\n\n    ...\n}\n')))),(0,o.kt)("h2",{id:"key"},"Key"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@Key")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@Id")," are similar but different."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@Id")," is used to specify the technical primary key of the table, can be used on scalar property."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@Key")," is used to specify the business primary key of the table, can be used on scalar property or many-to-one assocaition based on foreign key.")),(0,o.kt)("p",null,"For example:"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Id\n    long id();\n\n    @Key\n    String name();\n\n    @Key\n    int edition();\n\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @Id\n    val id: Long\n\n    @Key\n    val name: String\n\n    @Key\n    val edition: Int\n\n    ...\n}\n")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"From a technical point of view, Book has a primary key ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,o.kt)("p",{parentName:"li"},"  The technical primary key often stores some unique data that does not make business sense, such as automatic numbering, serial value, UUID, and snowflake id. But it's simple enough so it can simplify table joins and optimize their performance.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"From a business point of view, ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"edition")," combine to uniquely identify a book."),(0,o.kt)("p",{parentName:"li"},"  Business primary key stores unique and business-meaningful data, and is often used in conjunction with multiple columns. But it is relatively complex and does not directly participate in the table joins."))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the document explaining the use of ",(0,o.kt)("a",{parentName:"p",href:"../mutation/save-command"},"Save command")," to save data, we discuss the importance of business primary keys in detail")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In addition to statically using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Key")," annotation to specify the business primary key like this example, you can also dynamically specify the business primary key in the code, please see ",(0,o.kt)("a",{parentName:"p",href:"../mutation/save-command"},"Save command")," for more information.")))),(0,o.kt)("h2",{id:"ondissociate"},"OnDissociate"),(0,o.kt)("p",null,"It can only be used in many-to-one association based on foreign key, such as"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @Null\n    @ManyToOne\n    @OnDissociate(DissociateAction.SET_NULL)\n    BookStore store();\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    @ManyToOne\n    @OnDissociate(DissociateAction.SET_NULL)\n    val store: BookStore?\n    ...\n}\n")))),(0,o.kt)("p",null,"When"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Then the parent object is deleted"),(0,o.kt)("li",{parentName:"ul"},"or the parent discards some child objects (object tree overlay behavior based on save command)")),(0,o.kt)("p",null,"child objects will be dissociated."),(0,o.kt)("p",null,"DissociateAction has 3 options, corresponding to the foreign key behavior of the database:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"NONE: The current foreign key does not support dissociate action, preventing whole operation by exception."),(0,o.kt)("li",{parentName:"ul"},"SET_NULL: The foreign key will be automatically cleared. For parent's delete operation, it looks like ",(0,o.kt)("inlineCode",{parentName:"li"},"on delete set null"),"."),(0,o.kt)("li",{parentName:"ul"},"DELETE: The child object will be automatically deleted. For parent's delete operatoion, it looks like ",(0,o.kt)("inlineCode",{parentName:"li"},"on delete cascade"),".")))}y.isMDXComponent=!0}}]);