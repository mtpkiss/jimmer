"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[3189],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),p=r,g=m["".concat(d,".").concat(p)]||m[p]||u[p]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(7294),r=t(4334),o="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return p}});var a=t(3117),r=t(7294),o=t(4334),i=t(2389),l=t(7392),d=t(7094),s=t(2466),c="tabList__CuJ",u="tabItem_LNqP";function m(e){var n,t,i=e.lazy,m=e.block,p=e.defaultValue,g=e.values,f=e.groupId,b=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,l.l)(v,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(n=null!=p?p:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,d.U)(),j=N.tabGroupChoices,T=N.setTabGroupChoices,x=(0,r.useState)(k),I=x[0],w=x[1],C=[],D=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var O=j[f];null!=O&&O!==I&&v.some((function(e){return e.value===O}))&&w(O)}var P=function(e){var n=e.currentTarget,t=C.indexOf(n),a=v[t].value;a!==I&&(D(n),w(a),null!=f&&T(f,String(a)))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,r=C.indexOf(e.currentTarget)+1;t=null!=(a=C[r])?a:C[0];break;case"ArrowLeft":var o,i=C.indexOf(e.currentTarget)-1;t=null!=(o=C[i])?o:C[C.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},b)},v.map((function(e){var n=e.value,t=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,key:n,ref:function(e){return C.push(e)},onKeyDown:S,onFocus:P,onClick:P},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":I===n})}),null!=t?t:n)}))),i?(0,r.cloneElement)(h.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==I})}))))}function p(e){var n=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(n)},e))}},5727:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var a=t(3117),r=t(102),o=(t(7294),t(3905)),i=t(5488),l=t(5162),d=["components"],s={sidebar_position:2,title:"Get started"},c=void 0,u={unversionedId:"jimmer-core/usage",id:"jimmer-core/usage",title:"Get started",description:"Add dependencies",source:"@site/docs/jimmer-core/usage.mdx",sourceDirName:"jimmer-core",slug:"/jimmer-core/usage",permalink:"/jimmer/docs/jimmer-core/usage",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-core/usage.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Get started"},sidebar:"tutorialSidebar",previous:{title:"Problems and Solutions",permalink:"/jimmer/docs/jimmer-core/existing-problems"},next:{title:"Draft Proxies",permalink:"/jimmer/docs/jimmer-core/draft"}},m={},p=[{value:"Add dependencies",id:"add-dependencies",level:2},{value:"Declare immutable model",id:"declare-immutable-model",level:2},{value:"Usage",id:"usage",level:2}],g={toc:p};function f(e){var n=e.components,t=(0,r.Z)(e,d);return(0,o.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"add-dependencies"},"Add dependencies"),(0,o.kt)(i.Z,{groupId:"buildScript",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java(Gradle)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle"',title:'"build.gradle"'},"depdencies {\n    \n    implementation 'org.babyfish.jimmer:jimmer-core:0.7.83'\n    annotationProcessor 'org.babyfish.jimmer:jimmer-apt:0.7.83'\n}\n"))),(0,o.kt)(l.Z,{value:"java-maven",label:"Java(Maven)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"<dependencies>\n    <dependency>\n        <groupId>org.babyfish.jimmer</groupId>\n        <artifactId>jimmer-core</artifactId>\n        <version>0.7.83</version>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.10.1</version>\n            <configuration>\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.babyfish.jimmer</groupId>\n                        <artifactId>jimmer-apt</artifactId>\n                        <version>0.7.83</version>\n                    </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin(Gradle)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts"',title:'"build.gradle.kts"'},'plugins {\n    // Step1: Add ksp plugin\n    id("com.google.devtools.ksp") version "1.7.10-1.0.6"\n    ...omit other plugins...\n}\ndependencies {\n\n    // Step2: Add jimmer-core-kotlin\n    implementation("org.babyfish.jimmer:jimmer-core-kotlin:0.7.83")\n\n    // Step3: Apply ksp plugin\n    ksp("org.babyfish.jimmer:jimmer-ksp:0.7.83")\n}\n\n// Step4: Add generated sources into compile path.\n// Without this configuration, gradle command can still run.\n// However, Intellij cannot find the generated source.\nkotlin {\n    sourceSets.main {\n        kotlin.srcDir("build/generated/ksp/main/kotlin")\n    }\n}\n'))),(0,o.kt)(l.Z,{value:"kotlin-maven",label:"Kotlin(Maven)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"<dependency>\n    <groupId>org.babyfish.jimmer</groupId>\n    <artifactId>jimmer-core-kotlin</artifactId>\n    <version>0.7.83</version>\n</dependency>\n\n<build>\n    <sourceDirectory>src/main/kotlin</sourceDirectory>\n    <testSourceDirectory>src/test/kotlin</testSourceDirectory>\n\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n                <execution>\n                    <id>test-compile</id>\n                    <phase>test-compile</phase>\n                    <goals>\n                        <goal>test-compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <compilerPlugin>ksp</compilerPlugin>\n                </compilerPlugins>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>com.dyescape</groupId>\n                    <artifactId>kotlin-maven-symbol-processing</artifactId>\n                    <version>1.3</version>\n                </dependency>\n                <dependency>\n                    <groupId>org.babyfish.jimmer</groupId>\n                    <artifactId>jimmer-ksp</artifactId>\n                    <version>0.7.83</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n")))),(0,o.kt)("h2",{id:"declare-immutable-model"},"Declare immutable model"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNode.java"',title:'"TreeNode.java"'},"package yourpackage;\n\nimport javax.validation.constraints.Null;\nimport java.util.List;\n\nimport org.babyfish.jimmer.Immutable;\n\n@Immutable\npublic interface TreeNode {\n    \n    String name();\n\n    @Null // Nullable property, Java-API needs it, but kotlin-API does not.\n    TreeNode parent();\n\n    List<TreeNode> childNodes();\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Here, the properties ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"parent")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"childNodes")," adopt the naming rules of java record, do not start with ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),"."),(0,o.kt)("p",{parentName:"admonition"},"You can also use the traditional java bean naming convention, starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),". Such as: ",(0,o.kt)("inlineCode",{parentName:"p"},"getName"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"getParent"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"getChildNodes"),"."),(0,o.kt)("p",{parentName:"admonition"},"No matter which style you adopt, jimmer-core accepts it. It is recommended to use the naming style of java record that does not start with ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),", because ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," will naturally be meaningless without ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),"."),(0,o.kt)("p",{parentName:"admonition"},"Regardless of which style is used, it should be consistent within a single project."))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNode.kt"',title:'"TreeNode.kt"'},"package yourpackage\n\nimport org.babyfish.jimmer.Immutable\n\n@Immutable\ninterface TreeNode {\n\n    val name: String\n\n    val parent: TreeNode?\n\n    val childNodes: List<TreeNode>\n}\n")))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"jimmer-core uses the java annotation processor/ksp to generate mutable proxy (",(0,o.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),' in the code below). With mutable proxy, developers can simply "modify" immutable objects using imperative code.'),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// Step 1, create data from scratch\nTreeNode treeNode = TreeNodeDraft.$.produce(root -> {\n    root.setName("Root").addIntoChildNodes(food -> {\n        food\n            .setName("Food")\n            .addIntoChildNodes(drink -> {\n                drink\n                    .setName("Drink")\n                    .addIntoChildNodes(cococola -> {\n                        cococola.setName("Cococola");\n                    })\n                    .addIntoChildNodes(fanta -> {\n                        fanta.setName("Fanta");\n                    });\n                ;\n            });\n        ;\n    });\n});\n\n// Step 2, make some "changes" based on the \n// existing data to create new data.\nTreeNode newTreeNode = TreeNodeDraft.$.produce(\n        // highlight-next-line\n        treeNode, // existing data\n        root -> {\n            root\n                .childNodes(false).get(0) // Food\n                .childNodes(false).get(0) // Drink\n                .childNodes(false).get(0) // Cococola\n                .setName("Cococola plus");\n        }\n);\n\nSystem.out.println("treeNode:" + treeNode);\nSystem.out.println("newTreeNode:" + newTreeNode);\n'))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Step 1, create data from scratch\nval treeNode = new(TreeNode::class).by {\n    name = "Root"\n    childNodes().addBy {\n        name = "Food"\n        childNodes().addBy {\n            name = "Drinks"\n            childNodes().addBy {\n                name = "Cococola"\n            }\n            childNodes().addBy {\n                name = "Fanta"\n            }\n        }\n    }\n}\n\n// Step 2, make some "changes" based on the \n// existing data to create new data.\nval newTreeNode = new(TreeNode::class).by(\n    // highlight-next-line\n    treeNode // existing data\n) {\n    childNodes()[0] // Food\n        .childNodes()[0] // Drinks\n        .childNodes()[0] // Cococola\n        .name += " plus"\n}\n\nprintln("treeNode: $treeNode")\nprintln("newTreeNode: $newTreeNode")\n')))),(0,o.kt)("p",null,"Output results (the actual print results are compact, but formatted here for readability)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'treeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Cococola"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\nnewTreeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Cococola plus"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"The user-defined type ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeNode")," is immutable type; but the type ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft")," automatically generated by AnnotationProcessor is a mutable type, and developer can modify it very easily (Directly modifiable Draft objects are the parameters of lambda expressions in the example)."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The Draft object is very lightweight and is just a proxy. It uses a copy-on-write strategy, so instead of unconditionally copying the old object's data, the old object's data is copied only when it is modified for the first time.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For a huge object tree, only the proxy of the root object will be created, and other sub-proxy objects are created on demand according to the read operation of user code.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Ultimately, only the modified proxy and its parent proxies chain will be used to recreate new immutable objects; unmodified proxies simply return their holdings to the old object. citations. That is, the unchanged subtree is fully shared and reused with the original subtree.")))))}f.isMDXComponent=!0}}]);