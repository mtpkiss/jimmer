"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[7320],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),r=n(34334),i="tabItem_Ymn6";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},65488:function(e,t,n){n.d(t,{Z:function(){return g}});var a=n(83117),r=n(67294),i=n(34334),o=n(72389),l=n(67392),s=n(7094),c=n(12466),p="tabList__CuJ",d="tabItem_LNqP";function u(e){var t,n,o=e.lazy,u=e.block,g=e.defaultValue,m=e.values,h=e.groupId,k=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,l.l)(f,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===g?g:null!=(t=null!=g?g:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!f.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,s.U)(),T=v.tabGroupChoices,C=v.setTabGroupChoices,w=(0,r.useState)(y),q=w[0],x=w[1],j=[],O=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var S=T[h];null!=S&&S!==q&&f.some((function(e){return e.value===S}))&&x(S)}var I=function(e){var t=e.currentTarget,n=j.indexOf(t),a=f[n].value;a!==q&&(O(t),x(a),null!=h&&C(h,String(a)))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=j.indexOf(e.currentTarget)+1;n=null!=(a=j[r])?a:j[0];break;case"ArrowLeft":var i,o=j.indexOf(e.currentTarget)-1;n=null!=(i=j[o])?i:j[j.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},k)},f.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:q===t?0:-1,"aria-selected":q===t,key:t,ref:function(e){return j.push(e)},onKeyDown:L,onFocus:I,onClick:I},o,{className:(0,i.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":q===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(b.filter((function(e){return e.props.value===q}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==q})}))))}function g(e){var t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},7218:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return g}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=n(65488),l=n(85162),s=["components"],c={sidebar_position:1,title:"Trigger"},p=void 0,d={unversionedId:"jimmer-sql/advanced/trigger",id:"jimmer-sql/advanced/trigger",title:"Trigger",description:"Jimmer supports triggers, and users can listen to database changes.",source:"@site/docs/jimmer-sql/advanced/trigger.mdx",sourceDirName:"jimmer-sql/advanced",slug:"/jimmer-sql/advanced/trigger",permalink:"/jimmer/docs/jimmer-sql/advanced/trigger",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/advanced/trigger.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Trigger"},sidebar:"tutorialSidebar",previous:{title:"Advanced",permalink:"/jimmer/docs/jimmer-sql/advanced/"},next:{title:"External Cache",permalink:"/jimmer/docs/jimmer-sql/advanced/cache"}},u={},g=[{value:"Trigger type",id:"trigger-type",level:2},{value:"Supported trigger types",id:"supported-trigger-types",level:3},{value:"Recommended usage",id:"recommended-usage",level:3},{value:"Configure trigger type",id:"configure-trigger-type",level:2},{value:"Enable BinLog trigger",id:"enable-binlog-trigger",level:2},{value:"Building the external environment",id:"building-the-external-environment",level:3},{value:"Monitor message queue",id:"monitor-message-queue",level:3},{value:"Use example",id:"use-example",level:2},{value:"Preparation",id:"preparation",level:3},{value:"Registration processing logic",id:"registration-processing-logic",level:3},{value:"Experience triggers",id:"experience-triggers",level:3}],m={toc:g};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Jimmer supports triggers, and users can listen to database changes."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Triggers can notify not only changes of objects, but also changes of associations.")),(0,i.kt)("h2",{id:"trigger-type"},"Trigger type"),(0,i.kt)("h3",{id:"supported-trigger-types"},"Supported trigger types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"BinLog trigger"),(0,i.kt)("p",{parentName:"li"},"  This is the default trigger type, which does not affect the SQL generated by Jimmer itself, has high performance, events are triggered after the transaction is committed. "),(0,i.kt)("p",{parentName:"li"},"  It can monitor database changes caused by any reason, including data and changes caused by non-Jimmer APIs. However, the database must support binlog.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Transaction trigger"),(0,i.kt)("p",{parentName:"li"},"  This trigger does not require the database to support binlog, and events are triggered before the transaction is committed;\nits mechanism and ",(0,i.kt)("a",{parentName:"p",href:"https://seata.io/en-us/docs/dev/mode/at-mode.html"},"The AT mode of Alibaba Seata")," are similar,\nadditional query statements will be generated during the modification process,\nwhich has a certain impact on the modification performance, and only the changes of the database caused by the Jimmer API can be monitored."))),(0,i.kt)("p",null,"The difference between the two triggers is as follows"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"BinLog Trigger"),(0,i.kt)("th",{parentName:"tr",align:null},"Transaction Trigger"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Notification timing"),(0,i.kt)("td",{parentName:"tr",align:null},"After Transaction Commit"),(0,i.kt)("td",{parentName:"tr",align:null},"Before Transaction Commit")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Performance"),(0,i.kt)("td",{parentName:"tr",align:null},"High"),(0,i.kt)("td",{parentName:"tr",align:null},"Low")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Monitorable database changes"),(0,i.kt)("td",{parentName:"tr",align:null},"Database changes caused by any reason"),(0,i.kt)("td",{parentName:"tr",align:null},"Database changes caused only by the current application calling the Jimmer API")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Database requirements"),(0,i.kt)("td",{parentName:"tr",align:null},"Supported and binlog enabled"),(0,i.kt)("td",{parentName:"tr",align:null},"No special requirements")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Mechanism"),(0,i.kt)("td",{parentName:"tr",align:null},"Using third-party technology to push database binlog changes to the message queue, Jimmer application listens to the message queue"),(0,i.kt)("td",{parentName:"tr",align:null},"Any modification operation API of Jimmer automatically implants additional SQL queries to find data changes, similar to ",(0,i.kt)("a",{parentName:"td",href:"https://seata.io/en-us/docs/dev/mode/at-mode.html"},"The AT mode of Alibaba Seata"))))),(0,i.kt)("p",null,"Aside from the differences in this table, both triggers provide the same notification data to the user."),(0,i.kt)("h3",{id:"recommended-usage"},"Recommended usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"BinLog Trigger"),(0,i.kt)("p",{parentName:"li"},"BinLog triggers is triggered after transaction is committed, in the face of a given fact that cannot be changed."),(0,i.kt)("p",{parentName:"li"},"That is, the BinLog trigger has no effect on the original transaction and is allowed to perform time-consuming operations. So it is suitable to perform multiple tasks in its processing logic, especially these tasks"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cache consistency maintenance"),(0,i.kt)("li",{parentName:"ul"},"Heterogeneous data source synchronization"),(0,i.kt)("li",{parentName:"ul"},"Send messages to other microservices asynchronously"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Transaction Trigger"),(0,i.kt)("p",{parentName:"li"},"The transaction trigger is triggered before the transaction is committed, and its processing logic is directly embedded in the current transaction."),(0,i.kt)("p",{parentName:"li"},"If its event processing logic throws exception, the current business modification will fail; if its processing logic cannot be completed quickly, the current transaction will not release resources for a long time."),(0,i.kt)("p",{parentName:"li"},"Therefore, transaction triggers are suitable for appending more behaviors to the current transaction without breaking atomicity."),(0,i.kt)("p",{parentName:"li"},"Especially suitable for use with ",(0,i.kt)("a",{parentName:"p",href:"../mutation/save-command"},"save-command"),". save-command saves arbitrarily complex data structures and is a very black-boxed high-level API; transaction triggers can add some detailed monitoring and related redundant data linkage behaviors to save-command."))),(0,i.kt)("h2",{id:"configure-trigger-type"},"Configure trigger type"),(0,i.kt)("p",null,"Before discussing setting trigger types, let's look at how developers use triggers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(false)"),":\nThe BinLog trigger object is returned first, if not, the Transaction trigger object is returned.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(true)"),":\nExplicitly returns the Transaction trigger, if there is no transaction trigger object, throws an exception."))),(0,i.kt)("p",null,"In order to affect the result object that users can obtain through ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"TriggerType")," can be configured when building SqlClient:"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"javax.sql.DataSource dataSource = ...;\n\nJSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setEntityManager(\n        JimmerModule.ENTITY_MANAGER // Auto generated constant\n    )\n    // highlight-next-line\n    .setTriggerType(TriggerType.BOTH)\n    .builde();\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"javax.sql.DataSource dataSource = ...;\n\nvar sqlClient = newKSqlClient {\n    setEntityManager(\n        ENTITY_MANAGER // Auto generated constant\n    )\n    // highlight-next-line\n    setTriggerType(TriggerType.BOTH)\n}\n")))),(0,i.kt)("p",null,"Among them, ",(0,i.kt)("inlineCode",{parentName:"p"},"setEntityManager")," is the premise of using trigger, and ",(0,i.kt)("inlineCode",{parentName:"p"},"setTriggerType")," is used to configure trigger type, its argument has three values"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"BINLOG_ONLY:"),(0,i.kt)("p",{parentName:"li"},"Only binlog trigger object is supported, which is the default configuration."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sqlClient.getTriggers()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"sqlClient.getTriggers(false)")," return BinLog trigger objects."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sqlClient.getTriggers(true)")," will throw exception."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TRANSACTION_ONLY:"),(0,i.kt)("p",{parentName:"li"},"Only transaction trigger object is supported.\nReturns the same transaction trigger object regardless of the argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"BOTH:"),(0,i.kt)("p",{parentName:"li"},"Both binLog triggers and transaction triggers are supported."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sqlClient.getTriggers()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"sqlClient.getTriggers(false)")," return binlog trigger objects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sqlClient.getTriggers(true)")," returns the transaction trigger object")))),(0,i.kt)("p",null,"Here, a table is used to compare the three cases"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null),(0,i.kt)("th",null,"getTriggers(false)"),(0,i.kt)("th",null,"getTriggers(true)"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"BINLOG_ONLY"),(0,i.kt)("td",null,"Binlog trigger api object"),(0,i.kt)("td",null,(0,i.kt)("span",{style:{color:"red"}},"Throws exception"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"TRANSACTION_ONLY"),(0,i.kt)("td",{colspan:"2"},(0,i.kt)("center",null,(0,i.kt)("b",null,"Shared")," trigger api object"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"BOTH"),(0,i.kt)("td",null,"Binlog trigger api object"),(0,i.kt)("td",null,"Transaction trigger api object")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Q"),": Why is ",(0,i.kt)("inlineCode",{parentName:"p"},"BINLOG_ONLY")," default mode?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A"),": Transaction triggers will implant additional SQL queries in all save behaviors to simulate triggers, which will affect performance and are not supported by default.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Q"),": Why do two trigger APIs share the same object in ",(0,i.kt)("inlineCode",{parentName:"p"},"TRANSACTION_ONLY")," mode?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A"),": Jimmer's built-in cache consistency mechanism uses ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(false)"),", this behavior cannot be changed by developers."),(0,i.kt)("p",{parentName:"li"},"The purpose of this is to make the cache consistency mechanism dose not affect current transaction, cache can only be cleared after the transaction is committed. Therefore, the original transaction is not stretched, thus ending quickly releasing lock resources."),(0,i.kt)("p",{parentName:"li"},"However, not all database products support binlog. At this time, ",(0,i.kt)("inlineCode",{parentName:"p"},"getTriggers(false)")," returns the transaction trigger object, pretending to be the binlog trigger object, and taking over the cache consistency maintenance work that should have been handled by the binlog trigger."),(0,i.kt)("p",{parentName:"li"},"That is, ",(0,i.kt)("inlineCode",{parentName:"p"},"TRANSACTION_ONLY")," is designed for databases that do not support binlog, ",(0,i.kt)("strong",{parentName:"p"},"this is the only reason to choose this mode"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Q"),": In ",(0,i.kt)("inlineCode",{parentName:"p"},"BOTH")," mode, there are two different trigger API objects, does it mean that any modification event has two opportunities to process?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A"),": Yes, and this is an important feature."),(0,i.kt)("p",{parentName:"li"},"Unlike Jimmer's built-in cache consistency mechanism, which must be caused by ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(false)"),"; the user's business code does not have this restriction, and developers can freely decide whether a processing logic should be registered to ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(false)")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(true)"),", or even registering with both."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the developer's processing logic contains some data additional modifications, it must be in the atomic scope of the current transaction, it should be registered to ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(true)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the developer's processing logic does not need to participate in the current transaction, it should be registered to ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers(false)"),", so that the current transaction ends as soon as possible, and the lock resources are released as soon as possible")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the developer's processing logic contains both of the above two cases, the processing logic should be divided into two parts, and then should be registered to the two triggers respectively.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Q"),": For database that does not support binlog, is the cache consistency cleaning impossible to do after the transaction is committed?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A"),": No, if the developer is willing to optimize, it can be done."),(0,i.kt)("p",{parentName:"li"},"It is true that this kind of database cannot support binlog triggers, and using transaction triggers to be receive the data change event during the transaction life cycle is the only feasible way."),(0,i.kt)("p",{parentName:"li"},"However, it is not necessary to perform cache cleanup immediately after receiving the notification, because the cleanup behavior of remote caches such as redis has network communication costs and the possibility of communication failure, doing so will cause local transactions to be prolonged or even fail."),(0,i.kt)("p",{parentName:"li"},"Jimmer's cache system supports custom ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheOperator"),". By customizing ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheOperator"),", users can override the cleanup behavior of the cache system, record the cache deletion task in ThreadLocal but not execute it immediately, and execute it after the transaction is committed."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Practices that do not require reliability"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"The custom ",(0,i.kt)("inlineCode",{parentName:"li"},"CacheOperator")," uses ",(0,i.kt)("inlineCode",{parentName:"li"},"ThreadLocal")," to record the cache keys to be deleted and does not execute it immediately."),(0,i.kt)("li",{parentName:"ol"},"In Spring's ",(0,i.kt)("inlineCode",{parentName:"li"},"After commit")," event, centrally clean up the cache."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Practices that require reliability"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"The custom ",(0,i.kt)("inlineCode",{parentName:"li"},"CacheOperator")," uses ",(0,i.kt)("inlineCode",{parentName:"li"},"ThreadLocal")," to record the cache keys to be deleted and does not execute it immediately."),(0,i.kt)("li",{parentName:"ol"},"In Spring's ",(0,i.kt)("inlineCode",{parentName:"li"},"Before Commit")," event, integrate the scattered records. A one-time insert into the local event table."),(0,i.kt)("li",{parentName:"ol"},"In Spring's ",(0,i.kt)("inlineCode",{parentName:"li"},"After Commit")," event, fetch data from the local event table, clear the cache, and if successful, delete the data from the local event table."),(0,i.kt)("li",{parentName:"ol"},"Use a polling service to account for the failure of step 3.")))))),(0,i.kt)("h2",{id:"enable-binlog-trigger"},"Enable BinLog trigger"),(0,i.kt)("p",null,"Unlike tranaction trigger, binlog trigger need to use third-party technology to push database binlog changes to the message queue, and let the application listen to the message queue."),(0,i.kt)("p",null,"Therefore, it is not enough to specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"TriggerType")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"BINLOG_ONLY")," (also the default behavior) when building the SqlClient object."),(0,i.kt)("p",null,"There are many choices for message queues, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Kafka")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RebbitMQ"),"; there are also many choices for third-party technologies that push database incremental binlogs to message queues, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxWell"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Canal")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DataBus"),"."),(0,i.kt)("p",null,"Jimmer places no restrictions on such choices. However, to simplify the discussion, this document assumes that ",(0,i.kt)("inlineCode",{parentName:"p"},"Kafka")," is used for message queues and ",(0,i.kt)("inlineCode",{parentName:"p"},"Maxwell")," is used for binlog push technology."),(0,i.kt)("h3",{id:"building-the-external-environment"},"Building the external environment"),(0,i.kt)("p",null,"To use this feature, the following steps are required to build."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select a database that supports binlog and enable the binlog function."),(0,i.kt)("li",{parentName:"ol"},"Install Kafka and create a topic."),(0,i.kt)("li",{parentName:"ol"},"Enable Maxwell and send binlog changes to the kafka topic created in the previous step.")),(0,i.kt)("p",null,"You can click ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/babyfish-ct/jimmer/blob/main/example/env-with-cache/install.sh"},"here")," to see the docker install script with the example."),(0,i.kt)("h3",{id:"monitor-message-queue"},"Monitor message queue"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Component\npublic class MaxwellListener {\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private final Caches caches;\n\n    public MaxwellListener(JSqlClient sqlClient) {\n        this.caches = sqlClient.getCaches();\n    }\n\n    @KafkaListener(topics = "maxwell")\n    public void onHandle(\n            String json,\n            Acknowledgment acknowledgment\n    ) throws JsonProcessingException {\n        JsonNode node = MAPPER.readTree(json);\n        String tableName = node.get("table").asText();\n        String type = node.get("type").asText();\n        JsonNode data = node.get("data");\n        switch (type) {\n            case "insert":\n                binLog.accept(tableName, null, data);\n                break;\n            case "update":\n                binLog.accept(tableName, node.get("old"), data);\n                break;\n            case "delete":\n                binLog.accept(tableName, data, null);\n                break;\n        }\n        acknowledgment.acknowledge();\n    }\n}\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Component\nclass MaxwellListener(sqlClient: KSqlClient) {\n\n    private val caches: KCaches = sqlClient.caches\n\n    @KafkaListener(topics = ["maxwell"])\n    fun onHandle(\n        json: String,\n        acknowledgment: Acknowledgment\n    ) {\n        val node = MAPPER.readTree(json)\n        val tableName = node["table"].asText()\n        val type = node["type"].asText()\n        val data = node["data"]\n        when (type) {\n            "insert" ->\n                binLog.accept(tableName, null, data)\n            "update" ->\n                binLog.accept(tableName, node["old"], data)\n            "delete" ->\n                binLog.accept(tableName, data, null)\n        }\n        acknowledgment.acknowledge()\n    }\n\n    companion object {\n        private val MAPPER = ObjectMapper()\n    }\n}\n')))),(0,i.kt)("p",null,"Among them, ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.binLog.accept")," triggers events according to the binlog event of the message queue, developer only need to simply call this behavior."),(0,i.kt)("h2",{id:"use-example"},"Use example"),(0,i.kt)("h3",{id:"preparation"},"Preparation"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"If you want to use the binlog trigger, you must enable the binlog function of the database and use the code in the previous section to monitor the message queue."),(0,i.kt)("li",{parentName:"ul"},"If you want to use a transaction trigger, there is no need for any additional preparation work in succession."))),(0,i.kt)("h3",{id:"registration-processing-logic"},"Registration processing logic"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'sqlClient.getTriggers().addEntityListener(Book.class, e -> {\n    System.out.println("The object `Book` is changed");\n    System.out.println("\\told: " + e.getOldEntity());\n    System.out.println("\\tnew: " + e.getNewEntity());\n});\nsqlClient.getTriggers().addAssociationListener(BookProps.STORE, e -> {\n    System.out.println("The many-to-one association `Book.store` is changed");\n    System.out.println("\\tbook id: " + e.getSourceId());\n    System.out.println("\\tdetached book store id: " + e.getDetachedTargetId());\n    System.out.println("\\tattached book store id: " + e.getAttachedTargetId());\n});\nsqlClient.getTriggers().addAssociationListener(BookStoreProps.BOOKS, e -> {\n    System.out.println("The one-to-many association `BookStore.books` is changed");\n    System.out.println("\\tbook store id: " + e.getSourceId());\n    System.out.println("\\tdetached book id: " + e.getDetachedTargetId());\n    System.out.println("\\tattached book id: " + e.getAttachedTargetId());\n});\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'sqlClient.triggers.addEntityListener(Book::class) {\n    println("The object `Book` is changed");\n    println("\\told: ${it.oldEntity}");\n    println("\\tnew: ${it.newEntity}");\n}\nsqlClient.triggers.addAssociationListener(Book::store) {\n    println("The many-to-one association `Book.store` is changed");\n    println("\\tbook id: ${it.sourceId}");\n    println("\\tdetached book store id: ${it.detachedTargetId}");\n    println("\\tattached book store id: ${it.attachedTargetId}");\n}\nsqlClient.triggers.addAssociationListener(BookStore::books) {\n    println("The one-to-many association `BookStore.books` is changed");\n    println("\\tbook store id: ${it.sourceId}");\n    println("\\tdetached book id: ${it.detachedTargetId}");\n    println("\\tattached book id: ${it.attachedTargetId}");\n}\n')))),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sqClient.triggers")," is used to register the processing logic to the default triggers."),(0,i.kt)("p",null,"You can also replace ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlClient.getTriggers()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sqClient.triggers")," in the above code with ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"sqlClient.getTriggers(true)")),", so that the processing logic is registered to the Transaction trigger."),(0,i.kt)("h3",{id:"experience-triggers"},"Experience triggers"),(0,i.kt)("p",null,"BinLog trigger object can monitor database changes for any reason, and can send events to even if the database is modified by any other means bypassing the application."),(0,i.kt)("p",null,"For example, you can directly use SQL tools to execute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"update BOOK set STORE_ID = 2 where ID = 7;\n")),(0,i.kt)("p",null,"However, if you want to send events to transaction trigger object, database can only be modified the database through Jimmer's API, e.g."),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\nsqlClient\n        .createUpdate(book)\n        .set(book.store().id(), 2L)\n        .where(book.id().eq(7L))\n        .execute();\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n        .createUpdate(Book::class) {\n            set(table.store.id, 2L)\n            where(table.id eq 7L)\n        }\n        .execute()\n")))),(0,i.kt)("p",null,"Output result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'The object `Book` is changed\n    old: {"id":7,"name":"Programming TypeScript","edition":1,"price":47.50,"store":{"id":1}}\n    new: {"id":7,"name":"Programming TypeScript","edition":1,"price":47.50,"store":{"id":2}}\nThe many-to-one association `Book.store` is changed\n    book id: 7\n    detached book store id: 1\n    attached book store id: 2\nThe one-to-many association `BookStore.books` is changed\n    book store id: 1\n    detached book id: 7\n    attached book id: null\nThe one-to-many association `BookStore.books` is changed\n    book store id: 2\n    detached book id: null\n    attached book id: 7\n')))}h.isMDXComponent=!0}}]);