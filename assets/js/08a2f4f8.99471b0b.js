"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[1250],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(t),d=l,b=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return t?a.createElement(b,r(r({ref:n},u),{},{components:t})):a.createElement(b,r({ref:n},u))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var m=2;m<o;m++)r[m]=t[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(7294),l=t(4334),o="tabItem_Ymn6";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,r),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(3117),l=t(7294),o=t(4334),r=t(2389),i=t(7392),s=t(7094),m=t(2466),u="tabList__CuJ",c="tabItem_LNqP";function p(e){var n,t,r=e.lazy,p=e.block,d=e.defaultValue,b=e.values,k=e.groupId,g=e.className,f=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=b?b:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,i.l)(h,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===d?d:null!=(n=null!=d?d:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:f[0].props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),_=N.tabGroupChoices,T=N.setTabGroupChoices,I=(0,l.useState)(y),A=I[0],O=I[1],j=[],x=(0,m.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var E=_[k];null!=E&&E!==A&&h.some((function(e){return e.value===E}))&&O(E)}var q=function(e){var n=e.currentTarget,t=j.indexOf(n),a=h[t].value;a!==A&&(x(n),O(a),null!=k&&T(k,String(a)))},w=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,l=j.indexOf(e.currentTarget)+1;t=null!=(a=j[l])?a:j[0];break;case"ArrowLeft":var o,r=j.indexOf(e.currentTarget)-1;t=null!=(o=j[r])?o:j[j.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},g)},h.map((function(e){var n=e.value,t=e.label,r=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===n?0:-1,"aria-selected":A===n,key:n,ref:function(e){return j.push(e)},onKeyDown:w,onFocus:q,onClick:q},r,{className:(0,o.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":A===n})}),null!=t?t:n)}))),r?(0,l.cloneElement)(f.filter((function(e){return e.props.value===A}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==A})}))))}function d(e){var n=(0,r.Z)();return l.createElement(p,(0,a.Z)({key:String(n)},e))}},9087:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return m},metadata:function(){return c},toc:function(){return d}});var a=t(3117),l=t(102),o=(t(7294),t(3905)),r=t(5488),i=t(5162),s=["components"],m={sidebar_position:1,title:"Get started"},u=void 0,c={unversionedId:"jimmer-sql/basic/usage",id:"jimmer-sql/basic/usage",title:"Get started",description:"jimmer-sql has relatively more content, and subsequent articles will explain it step by step. This article briefly lists some of its functions to give readers a perceptual understanding.",source:"@site/docs/jimmer-sql/basic/usage.mdx",sourceDirName:"jimmer-sql/basic",slug:"/jimmer-sql/basic/usage",permalink:"/jimmer/docs/jimmer-sql/basic/usage",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/basic/usage.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Get started"},sidebar:"tutorialSidebar",previous:{title:"Basic",permalink:"/jimmer/docs/jimmer-sql/basic/"},next:{title:"Mapping",permalink:"/jimmer/docs/jimmer-sql/basic/mapping"}},p={},d=[{value:"Add dependencies",id:"add-dependencies",level:2},{value:"Define entity interfaces",id:"define-entity-interfaces",level:2},{value:"Create SqlClient",id:"create-sqlclient",level:2},{value:"Query",id:"query",level:2},{value:"Basic query",id:"basic-query",level:3},{value:"Use object fetcher",id:"use-object-fetcher",level:3},{value:"Use table join",id:"use-table-join",level:3},{value:"Sub query",id:"sub-query",level:3},{value:"Group query",id:"group-query",level:3},{value:"Pagination query",id:"pagination-query",level:3},{value:"Mix Native SQL",id:"mix-native-sql",level:3},{value:"Mutation",id:"mutation",level:2},{value:"Use statement",id:"use-statement",level:3},{value:"update statement",id:"update-statement",level:4},{value:"delete statement",id:"delete-statement",level:4},{value:"Use command",id:"use-command",level:3},{value:"Save command",id:"save-command",level:4},{value:"1. Save lonely object",id:"1-save-lonely-object",level:5},{value:"2. Save object tree",id:"2-save-object-tree",level:5},{value:"Delete command",id:"delete-command",level:4}],b={toc:d};function k(e){var n=e.components,t=(0,l.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"jimmer-sql has relatively more content, and subsequent articles will explain it step by step. This article briefly lists some of its functions to give readers a perceptual understanding."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This document only describes how to use Jimmer in the most primitive way without using spring-boot."),(0,o.kt)("p",{parentName:"admonition"},"Starting from 0.6.x, Jimmer integrates spring-data and provides spring-boot-starter."),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Further reduce the difficulty of use, and the back-end development becomes extremely simple"),(0,o.kt)("li",{parentName:"ul"},"Provide front-end and back-end free docking services.")),(0,o.kt)("p",{parentName:"admonition"},"For this new and easier way to use, please refer to ",(0,o.kt)("a",{parentName:"p",href:"../spring-boot"},"Using Spring Boot Starter")),(0,o.kt)("p",{parentName:"admonition"},"If you want more details on using jimmer in a non-spring environment, you can continue reading this article.")),(0,o.kt)("h2",{id:"add-dependencies"},"Add dependencies"),(0,o.kt)(r.Z,{groupId:"buildScript",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java(Gradle)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle"',title:'"build.gradle"'},"depdencies {\n    \n    implementation 'org.babyfish.jimmer:jimmer-sql:0.7.93'\n    annotationProcessor 'org.babyfish.jimmer:jimmer-apt:0.7.93'\n\n    runtimeOnly 'com.h2database:h2:2.1.212'\n}\n"))),(0,o.kt)(i.Z,{value:"java-maven",label:"Java(Maven)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"<dependencies>\n    <dependency>\n        <groupId>org.babyfish.jimmer</groupId>\n        <artifactId>jimmer-sql</artifactId>\n        <version>0.7.93</version>\n    </dependency>\n    <dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <version>2.1.212</version>\n        <scope>runtime</scope>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.10.1</version>\n            <configuration>\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.babyfish.jimmer</groupId>\n                        <artifactId>jimmer-apt</artifactId>\n                        <version>0.7.93</version>\n                    </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin(Gradle)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts"',title:'"build.gradle.kts"'},'plugins {\n    // Step1: Add ksp plugin\n    id("com.google.devtools.ksp") version "1.7.10-1.0.6"\n\n    ...ommit other plugins...\n}\ndepdencies {\n    \n    // Step2: Add jimmer-sql-kotlin\n    implementation("org.babyfish.jimmer:jimmer-sql-kotlin:0.7.93")\n\n    // Step3: Apply ksp plugin\n    ksp("org.babyfish.jimmer:jimmer-ksp:0.7.93")\n\n    runtimeOnly("com.h2database:h2:2.1.212")\n\n    ...ommit other dependency...\n}\n\n// Step4: Add generated sources into compile path.\n// Without this configuration, gradle command can still run.\n// However, Intellij cannot find the generated source.\nkotlin {\n    sourceSets.main {\n        kotlin.srcDir("build/generated/ksp/main/kotlin")\n    }\n}\n'))),(0,o.kt)(i.Z,{value:"kotlin-maven",label:"Kotlin(Maven)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"<dependency>\n    <groupId>org.babyfish.jimmer</groupId>\n    <artifactId>jimmer-sql-kotlin</artifactId>\n    <version>0.7.93</version>\n</dependency>\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <version>2.1.212</version>\n    <scope>runtime</scope>\n</dependency>\n\n<build>\n    <sourceDirectory>src/main/kotlin</sourceDirectory>\n    <testSourceDirectory>src/test/kotlin</testSourceDirectory>\n\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n                <execution>\n                    <id>test-compile</id>\n                    <phase>test-compile</phase>\n                    <goals>\n                        <goal>test-compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <compilerPlugin>ksp</compilerPlugin>\n                </compilerPlugins>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>com.dyescape</groupId>\n                    <artifactId>kotlin-maven-symbol-processing</artifactId>\n                    <version>1.3</version>\n                </dependency>\n                <dependency>\n                    <groupId>org.babyfish.jimmer</groupId>\n                    <artifactId>jimmer-ksp</artifactId>\n                    <version>0.7.93</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n")))),(0,o.kt)("h2",{id:"define-entity-interfaces"},"Define entity interfaces"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStore.java"',title:'"BookStore.java"'},'package org.babyfish.jimmer.sql.example.model;\n\nimport javax.validation.constraints.Null;\nimport java.util.List;\n\nimport org.babyfish.jimmer.sql.Entity;\nimport org.babyfish.jimmer.sql.Id;\nimport org.babyfish.jimmer.sql.OneToMany;\nimport org.babyfish.jimmer.sql.Key;\n\n@Entity\npublic interface BookStore {\n\n    @Id\n    long id();\n\n    @Key\n    String name();\n\n    @Null\n    String website();\n\n    @OneToMany(mappedBy = "store")\n    List<Book> books();\n}\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStore.kt"',title:'"BookStore.kt"'},'package org.babyfish.jimmer.sql.example.model\n\nimport org.babyfish.jimmer.sql.Entity\nimport org.babyfish.jimmer.sql.Id\nimport org.babyfish.jimmer.sql.OneToMany\nimport org.babyfish.jimmer.sql.Key\n\n@Entity\npublic interface BookStore {\n\n    @Id\n    val id: Long\n\n    @Key\n    val name: String\n\n    val website: String?\n\n    @OneToMany(mappedBy = "store")\n    val books: List<Book>\n}\n')))),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'package org.babyfish.jimmer.sql.example.model;\n\nimport javax.validation.constraints.Null;\nimport java.math.BigDecimal;\nimport java.util.List;\n\nimport org.babyfish.jimmer.sql.Entity;\nimport org.babyfish.jimmer.sql.JoinColumn;\nimport org.babyfish.jimmer.sql.Key;\nimport org.babyfish.jimmer.sql.ManyToOne;\nimport org.babyfish.jimmer.sql.ManyToMany;\n\n@Entity\npublic interface Book {\n\n    @Id\n    long id();\n\n    @Key\n    String name();\n\n    @Key\n    int edition();\n\n    BigDecimal price();\n\n    @Null\n    @ManyToOne\n    BookStore store();\n\n    @ManyToMany\n    @JoinTable(\n            name = "BOOK_AUTHOR_MAPPING",\n            joinColumnName = "BOOK_ID",\n            inverseJoinColumnName = "AUTHOR_ID"\n    )\n    List<Author> authors();\n}\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'package org.babyfish.jimmer.sql.example.model\n\nimport java.math.BigDecimal\nimport java.util.UUID\n\nimport org.babyfish.jimmer.sql.Entity\nimport org.babyfish.jimmer.sql.JoinColumn\nimport org.babyfish.jimmer.sql.Key\nimport org.babyfish.jimmer.sql.ManyToOne\nimport org.babyfish.jimmer.sql.ManyToMany\n\n@Entity\npublic interface Book {\n\n    @Id\n    val id: Long\n\n    @Key\n    val name: String\n\n    @Key\n    val edition: Int\n\n    val price: BigDecimal\n\n    @ManyToOne\n    val store: BookStore?\n\n    @ManyToMany\n    @JoinTable(\n            name = "BOOK_AUTHOR_MAPPING",\n            joinColumnName = "BOOK_ID",\n            inverseJoinColumnName = "AUTHOR_ID"\n    )\n    val authors: List<Author>\n}\n')))),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},'package org.babyfish.jimmer.sql.example.model;\n\nimport java.util.List;\nimport org.babyfish.jimmer.sql.Entity;\nimport org.babyfish.jimmer.sql.Key;\nimport org.babyfish.jimmer.sql.ManyToMany;\n\n@Entity\npublic interface Author {\n\n    @Id\n    long id();\n\n    @Key\n    String firstName();\n\n    @Key\n    String lastName();\n\n    Gender gender();\n\n    @ManyToMany(mappedBy = "authors")\n    List<Book> books();\n}\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},'package org.babyfish.jimmer.sql.example.model\n\nimport org.babyfish.jimmer.sql.Entity\nimport org.babyfish.jimmer.sql.Key\nimport org.babyfish.jimmer.sql.ManyToMany\n\n@Entity\ninterface Author {\n\n    @Id\n    val id: Long\n\n    @Key\n    val firstName: String\n\n    @Key\n    val lastName: String\n\n    val gender: Gender\n\n    @ManyToMany(mappedBy = "authors")\n    val books: List<Book>\n}\n')))),(0,o.kt)("p",null,"A new type ",(0,o.kt)("inlineCode",{parentName:"p"},"Gender")," is used in the interface ",(0,o.kt)("inlineCode",{parentName:"p"},"Author"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Gender")," is an enum type defined as follows"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Gender.java"',title:'"Gender.java"'},"package org.babyfish.jimmer.sql.example.model;\n\npublic enum Gender {\n    MALE,\n    FEMALE\n}\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Gender.kt"',title:'"Gender.kt"'},"package org.babyfish.jimmer.sql.example.model\n\nenum class Gender {\n    MALE,\n    FEMALE\n}\n")))),(0,o.kt)("h2",{id:"create-sqlclient"},"Create SqlClient"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"JSqlClient/KSqlClient")," is the entry point of all APIs of jimmer-sql, therefore, SqlClient needs to be created first."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The entry points of Java API and Kotlin API are different"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The entry to the Java API is ",(0,o.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.sql.JSqlClient")),(0,o.kt)("li",{parentName:"ul"},"The entry to the Kotlin API is ",(0,o.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.sql.kt.KSqlClient")))),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package org.babyfish.jimmer.sql.example;\n\nimport org.babyfish.jimmer.sql.JSqlClient;\nimport org.babyfish.jimmer.sql.example.model.Gender;\nimport org.babyfish.jimmer.sql.runtime.ConnectionManager;\nimport org.babyfish.jimmer.sql.runtime.ScalarProvider;\n\nimport org.babyfish.jimmer.sql.example.model.Gender;\nimport javax.sql.DataSource;\n\nDataSource dataSource = ...;\n\nJSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setConnectionManager(\n        ConnectionManager.simpleConnectionManager(dataSource)\n    )\n    .addScalarProvider(\n            ScalarProvider.enumProviderByString(Gender.class, it -> {\n                it.map(Gender.MALE, "M");\n                it.map(Gender.FEMALE, "F");\n            })\n    )\n    .build();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'import org.babyfish.jimmer.example.kt.sql.model.Gender\nimport org.babyfish.jimmer.sql.kt.newKSqlClient\nimport org.babyfish.jimmer.sql.runtime.ScalarProvider\nimport javax.sql.DataSource\n\nval sqlClient = newKSqlClient {\n    setConnectionManager {\n        dataSource.connection.use {\n            proceed(it)\n        }\n        addScalarProvider(\n            ScalarProvider.enumProviderByString(Gender::class.java) {\n                it.map(Gender.MALE, "M")\n                it.map(Gender.FEMALE, "F")\n            }\n        )\n    }\n}\n')))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This example only let jimmer-sql can automatically create connections based on the connection pool."),(0,o.kt)("p",{parentName:"admonition"},"For the topic of cooperation with Spring transaction mechanism, please refer to ",(0,o.kt)("a",{parentName:"p",href:"./sql-client"},"SqlClient"),".")),(0,o.kt)("h2",{id:"query"},"Query"),(0,o.kt)("h3",{id:"basic-query"},"Basic query"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(book.name().like("Java"))\n    .select(book)\n    .execute();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.name like "Kotlin")\n        select(table)\n    }\n    .execute()\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \nfrom BOOK as tb_1_ \nwhere tb_1_.NAME like ?\n")),(0,o.kt)("h3",{id:"use-object-fetcher"},"Use object fetcher"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(book.name().like("Learning GraphQL"))\n    .select(\n            // highlight-next-line\n            book.fetch(\n                    BookFetcher.$\n                            .allScalarFields()\n                            .store(\n                                    BookStoreFetcher.$\n                                            .allScalarFields()\n                            )\n                            .authors(\n                                    AuthorFetcher.$\n                                            .allScalarFields()\n                            )\n            )\n    )\n    .execute();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.name eq "Learning GraphQL")\n        select(\n            // highlight-next-line\n            table.fetchBy {\n                allScalarFields()\n                store {\n                    allScalarFields()\n                }\n                authors {\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute()\n')))),(0,o.kt)("p",null,"The variable ",(0,o.kt)("inlineCode",{parentName:"p"},"books")," will be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'[ \n    {\n        "id" : 1,\n        "name" : "Learning GraphQL",\n        "edition" : 1,\n        "price" : 50.00,\n        "store" : {\n            "id" : 1,\n            "name" : "O\'REILLY",\n            "website" : null\n        },\n        "authors" : [ \n            {\n                "id" : 1,\n                "firstName" : "Eve",\n                "lastName" : "Procello",\n                "gender" : "FEMALE"\n            }, \n            {\n                "id" : 2,\n                "firstName" : "Alex",\n                "lastName" : "Banks",\n                "gender" : "MALE"\n            } \n        ]\n    }, \n    {\n        "id" : 2,\n        "name" : "Learning GraphQL",\n        "edition" : 2,\n        "price" : 55.00,\n        "store" : {\n            "id" : 1,\n            "name" : "O\'REILLY",\n            "website" : null\n        },\n        "authors" : [ \n            {\n                "id" : 1,\n                "firstName" : "Eve",\n                "lastName" : "Procello",\n                "gender" : "FEMALE"\n            }, \n            {\n                "id" : 2,\n                "firstName" : "Alex",\n                "lastName" : "Banks",\n                "gender" : "MALE"\n            } \n        ]\n    }, \n    {\n        "id" : 3,\n        "name" : "Learning GraphQL",\n        "edition" : 3,\n        "price" : 51.00,\n        "store" : {\n            "id" : 1,\n            "name" : "O\'REILLY",\n            "website" : null\n        },\n        "authors" : [ \n            {\n                "id" : 1,\n                "firstName" : "Eve",\n                "lastName" : "Procello",\n                "gender" : "FEMALE"\n            }, \n            {\n                "id" : 2,\n                "firstName" : "Alex",\n                "lastName" : "Banks",\n                "gender" : "MALE"\n            } \n        ]\n    } \n]\n')),(0,o.kt)("p",null,"Finally, three SQL statements will be generated."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Query aggregate roots"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \nfrom BOOK as tb_1_ \nwhere tb_1_.NAME = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Resolve the many-to-one assocaition ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.store")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.WEBSITE \nfrom BOOK_STORE as tb_1_ \nwhere tb_1_.ID = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Resolve the many-to-many association ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.authors")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_2_.BOOK_ID, \n    tb_1_.ID, \n    tb_1_.FIRST_NAME, \n    tb_1_.LAST_NAME, \n    tb_1_.GENDER \nfrom AUTHOR as tb_1_ \ninner join BOOK_AUTHOR_MAPPING as tb_2_ on tb_1_.ID = tb_2_.AUTHOR_ID \nwhere tb_2_.BOOK_ID in (?, ?, ?)\n")))),(0,o.kt)("h3",{id:"use-table-join"},"Use table join"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book\n            // highlight-next-line\n            .store()\n            .name()\n            .eq("MANNING")\n    )\n    .select(book)\n    .execute();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n                // highlight-next-line\n                .store\n                .name eq "MANNING"\n        )\n        select(table)\n    }\n    .execute()\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \nfrom BOOK as tb_1_\n/* highlight-next-line */\ninner join BOOK_STORE as tb_2_ on tb_1_.STORE_ID = tb_2_.ID \nwhere tb_2_.NAME = ?\n")),(0,o.kt)("h3",{id:"sub-query"},"Sub query"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\nAuthorTableEx author = AuthorTableEx.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book.id().in(sqlClient\n            //highlight-next-line\n            .createSubQuery(author)\n            .where(author.firstName().like("Alex"))\n            .select(author.books().id())\n        )\n    )\n    .select(book)\n    .execute();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            // highlight-next-line\n            table.id valueIn subQuery(Author::class) {\n                where(table.firstName eq "Alex")\n                select(table.books.id)\n            }\n        )\n        select(table)\n    }\n    .execute()\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \nfrom BOOK as tb_1_ \nwhere tb_1_.ID in (\n    /* highlight-next-line */\n    select tb_3_.BOOK_ID \n    from AUTHOR as tb_2_ \n    inner join BOOK_AUTHOR_MAPPING as tb_3_ \n    on tb_2_.ID = tb_3_.AUTHOR_ID \n    where tb_2_.FIRST_NAME like ?\n)\n")),(0,o.kt)("h3",{id:"group-query"},"Group query"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\n\n// Column1: BookStore id\n// Column2: Average book price of each BookStore\nList<Tuple2<Long, BigDecimal>> tuples = sqlClient\n    .createQuery(book)\n    // highlight-next-line\n    .groupBy(book.store().id())\n    .select(\n        book.store().id(),\n        // highlight-next-line\n        book.price().avg()\n    )\n    .execute();\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Column1: BookStore id\n// Column2: Average book price of each BookStore\nval tuples = sqlClient\n    .createQuery(Book::class) {\n        // highlight-next-line\n        groupBy(table.store.id)\n        select(\n            table.store.id,\n            // highlight-next-line\n            avg(table.price).asNonNull()\n        )\n    }\n    .execute()\n")))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.STORE_ID, \n    /* highlight-next-line */\n    avg(tb_1_.PRICE) \nfrom BOOK as tb_1_ \n/* highlight-next-line */\ngroup by tb_1_.STORE_ID\n")),(0,o.kt)("h3",{id:"pagination-query"},"Pagination query"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\nConfigurableRootQuery<BookTable, Book> bookQuery = \n    sqlClient\n        .createQuery(book)\n        .where(book.store().name().eq("O\'REILLY"))\n        .orderBy(book.name())\n        .select(book);\n\nTypedRootQuery<Long> countQuery = bookQuery\n    // highlight-next-line\n    .reselect((q, t) ->\n        q.select(t.count())\n    )\n    .withoutSortingAndPaging();\n\nint rowCount = countQuery.execute().get(0).intValue();\n\nList<Book> rows = bookQuery\n    // highlight-next-line\n    .limit(/*limit*/ rowCount / 3, /*offset*/ rowCount / 3)\n    .execute();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val bookQuery = sqlClient\n    .createQuery(Book::class) {\n        where(table.store.name eq "O\'REILLY")\n        orderBy(table.name)\n        select(table)\n    }\n\nval countQuery = bookQuery\n    // highlight-next-line\n    .reselect {\n        select(count(table))\n    }\n    .withoutSortingAndPaging()\n\nval rowCount = countQuery.execute()[0].toInt()\n\nval books = bookQuery\n    .limit(limit = rowCount / 3, offset = rowCount / 3)\n    .execute()\n')))),(0,o.kt)("p",null,"Two SQL statements are genearted"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"/* highlight-next-line */\nselect count(tb_1_.ID) \nfrom BOOK as tb_1_ \ninner join BOOK_STORE as tb_2_ on tb_1_.STORE_ID = tb_2_.ID \nwhere tb_2_.NAME = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \nfrom BOOK as tb_1_ \ninner join BOOK_STORE as tb_2_ on tb_1_.STORE_ID = tb_2_.ID \nwhere tb_2_.NAME = ? \norder by tb_1_.NAME asc \n/* highlight-next-line */\nlimit ?\n")))),(0,o.kt)("h3",{id:"mix-native-sql"},"Mix Native SQL"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\n// Column 1: Book object\n// Column 2: Global price rank\n// Column 3: Local price rank in its BookStore\nList<Tuple3<Book, Integer, Integer>> tuples = sqlClient\n    .createQuery(book)\n    .select(\n        book,\n        // highlight-next-line\n        Expression.numeric().sql(\n            Integer.class,\n            "rank() over(order by %e desc)",\n            it -> it.expression(book.price())\n        ),\n        // highlight-next-line\n        Expression.numeric().sql(\n            Integer.class,\n            "rank() over(partition by %e order by %e desc)",\n            it -> it\n                .expression(book.store().id())\n                .expression(book.price())\n        )\n    )\n    .execute();\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},'// Column 1: Book object\n// Column 2: Global price rank\n// Column 3: Local price rank in its BookStore\nval tuples = sqlClient\n    .createQuery(Book::class) {\n        select(\n            table,\n            // highlight-next-line\n            sql(\n                Int::class,\n                "rank() over(order by %e desc)"\n            ) {\n                expression(table.price)\n            },\n            // highlight-next-line\n            sql(\n                Int::class,\n                "rank() over(partition by %e order by %e desc)"\n            ) {\n                expression(table.store.id)\n                expression(table.price)\n            }\n        )\n    }\n    .execute()\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID, \n    \n    /* highlight-next-line */\n    rank() over(order by tb_1_.PRICE desc), \n\n    /* highlight-next-line */\n    rank() over(partition by tb_1_.STORE_ID order by tb_1_.PRICE desc) \nfrom BOOK as tb_1_\n")),(0,o.kt)("h2",{id:"mutation"},"Mutation"),(0,o.kt)("p",null,"jimmer-sql provides two ways to modify the database, statement and command"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Statement: You can execute update and delete, which is suitable for occasions where the logic is simple but batch operations are required."),(0,o.kt)("li",{parentName:"ul"},"command: can execute insert, update and delete, which is suitable for situations with complex logic.")),(0,o.kt)("h3",{id:"use-statement"},"Use statement"),(0,o.kt)("h4",{id:"update-statement"},"update statement"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\nint affectedRowCount = sqlClient\n    // highlight-next-line\n    .createUpdate(book)\n    .set(\n        book.price(),\n        book.price().plus(new BigDecimal(10))\n    )\n    .where(book.name().like("Java"))\n    .execute();\nSystem.out.println("Affected row count: " + affectedRowCount);\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val affectedRowCount = sqlClient\n    // highlight-next-line\n    .createUpdate(Book::class) {\n        set(table.price, table.price + BigDecimal(20))\n        where(table.name like "Kotlin")\n    }\n    .execute()\nprintln("Affected row count: $affectedRowCount")\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"update BOOK tb_1_ \nset PRICE = tb_1_.PRICE + ? \nwhere tb_1_.NAME like ?\n")),(0,o.kt)("h4",{id:"delete-statement"},"delete statement"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\n\nint affectedRowCount = sqlClient\n    // highlight-next-line\n    .createDelete(book)\n    .where(book.name().like("Java"))\n    .execute();\nSystem.out.println("Affected row count: " + affectedRowCount);\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val affectedRowCount = sqlClient\n    // highlight-next-line\n    .createDelete(Book::class) {\n        where(table.name like "Kotlin")\n    }\n    .execute()\nprintln("Affected row count: $affectedRowCount")\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"delete from BOOK as tb_1_ where tb_1_.NAME like ?\n")),(0,o.kt)("h3",{id:"use-command"},"Use command"),(0,o.kt)("h4",{id:"save-command"},"Save command"),(0,o.kt)("p",null,"Due to the jimmer object is dynamic, entity objects can represent a variety of information, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Partial object"),(0,o.kt)("li",{parentName:"ul"},"Complete object"),(0,o.kt)("li",{parentName:"ul"},"Shallower object tree"),(0,o.kt)("li",{parentName:"ul"},"Deeper object tree")),(0,o.kt)("p",null,"In any case, you can use the save command to insert, update, or save it with a single line of code (the so-called save, that is insert or update)."),(0,o.kt)("p",null,"In order to give a perceptual cognition and preliminary understanding, this article demonstrates two examples, saving a single object and saving a object tree."),(0,o.kt)("h5",{id:"1-save-lonely-object"},"1. Save lonely object"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'SimpleSaveResult<Book> result = sqlClient\n    .getEntities()\n    .save(\n        BookDraft.$.produce(book ->\n            book.setName("BookName")\n                .setEdition(1)\n                .setPrice(new BigDecimal(50))\n        )\n    );\nSystem.out.println(\n    "Affected row count: " + \n    result.getTotalAffectedRowCount()\n);\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val result = sqlClient\n    .entities\n    .save(\n        new(Book::class).by { \n            name = "BookName"\n            edition = 1\n            price = BigDecimal(50)\n        }\n    )\nprintln("Affected row count: ${result.totalAffectedRowCount}")\n')))),(0,o.kt)("p",null,"The actual execution logic of this command depends on the existing data in the database. Assuming that there is no book whose ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),' is "BookName" and ',(0,o.kt)("inlineCode",{parentName:"p"},"edition")," is 1, the following SQL statements are generated."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION \nfrom BOOK as tb_1_ \nwhere tb_1_.NAME = ? and tb_1_.EDITION = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK(ID, NAME, EDITION, PRICE) values(?, ?, ?, ?)\n")))),(0,o.kt)("h5",{id:"2-save-object-tree"},"2. Save object tree"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'SimpleSaveResult<Book> result = sqlClient\n    .getEntities()\n    .saveCommand(\n        BookDraft.$.produce(book -> {\n            book.setName("BookName")\n                .setEdition(1)\n                .setPrice(new BigDecimal(50))\n                .applyStore(store -> \n                    store.setName("StoreName")\n                )\n                .addIntoAuthors(author -> {\n                    author\n                            .setFirstName("AuthorFirstName-1")\n                            .setLastName("AuthorLastName-1")\n                            .setGender(Gender.MALE);\n                })\n                .addIntoAuthors(author -> {\n                    author\n                            .setFirstName("AuthorFirstName-2")\n                            .setLastName("AuthorLastName-2")\n                            .setGender(Gender.FEMALE);\n                });\n        })\n    )\n    .configure(\n            AbstractSaveCommand.Cfg::setAutoAttachingAll\n    )\n    .execute();\n\nSystem.out.println(\n\n    "Affected row count: " +\n    result.getTotalAffectedRowCount() +\n\n    "\\nAffected row count of table \'BOOK\': " +\n    result.getAffectedRowCount(AffectedTable.of(Book.class)) +\n\n    "\\nAffected row count of table \'BOOK_STORE\': " +\n    result.getAffectedRowCount(AffectedTable.of(BookStore.class)) +\n\n    "\\nAffected row count of table \'AUTHOR\': " +\n    result.getAffectedRowCount(AffectedTable.of(Author.class)) +\n\n    "\\nAffected row count of middle table \'BOOK_AUTHOR_MAPPING\': " +\n    result.getAffectedRowCount(AffectedTable.of(BookProps.AUTHORS))\n);\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val result = sqlClient\n    .entities\n    .save(\n        new(Book::class).by { \n            name = "BookName"\n            edition = 1\n            price = BigDecimal(50)\n            store().apply { \n                name = "StoreName"\n            }\n            authors().addBy { \n                firstName = "AuthorFirstName-1"\n                lastName = "AuthorFirstName-1"\n                gender = Gender.MALE\n            }\n            authors().addBy {\n                firstName = "AuthorFirstName-2"\n                lastName = "AuthorFirstName-2"\n                gender = Gender.FEMALE\n            }\n        }\n    ) {\n        setAutoAttachingAll()\n    }\nprintln(\n    """Affected row count: ${result.totalAffectedRowCount}\n        |Affected row count of table \'BOOK\': ${\n            result.affectedRowCount(Book::class)\n        }\n        |Affected row count of table \'BOOK_STORE\': ${\n            result.affectedRowCount(BookStore::class)\n        }\n        |Affected row count of table \'AUTHOR\': ${\n            result.affectedRowCount(Author::class)\n        }Affected row count of middle table \'BOOK_AUTHOR_MAPPING\': ${\n            result.affectedRowCount(Book::authors)\n        }\n    """.trimMargin()\n)\n')))),(0,o.kt)("p",null,"The actual execution logic of this command depends on the existing data in the database. Assuming that all objects in the object tree do not exist in the database, the following SQL statements are generated."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select tb_1_.ID, tb_1_.NAME \nfrom BOOK_STORE as tb_1_ \nwhere tb_1_.NAME = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK_STORE(ID, NAME) values(?, ?)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION \nfrom BOOK as tb_1_ \nwhere tb_1_.NAME = ? and tb_1_.EDITION = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK(ID, NAME, EDITION, PRICE, STORE_ID) \nvalues(?, ?, ?, ?, ?)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select tb_1_.ID, tb_1_.FIRST_NAME, tb_1_.LAST_NAME \nfrom AUTHOR as tb_1_ \nwhere tb_1_.FIRST_NAME = ? and tb_1_.LAST_NAME = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into AUTHOR(ID, FIRST_NAME, LAST_NAME, GENDER) \nvalues(?, ?, ?, ?)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select tb_1_.ID, tb_1_.FIRST_NAME, tb_1_.LAST_NAME \nfrom AUTHOR as tb_1_ \nwhere tb_1_.FIRST_NAME = ? and tb_1_.LAST_NAME = ?\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into AUTHOR(ID, FIRST_NAME, LAST_NAME, GENDER) \nvalues(?, ?, ?, ?)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK_AUTHOR_MAPPING(BOOK_ID, AUTHOR_ID) \nvalues \n    (?, ?), \n    (?, ?)\n")))),(0,o.kt)("h4",{id:"delete-command"},"Delete command"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Collection<Long> ids = ...\n\nDeleteResult result = sqlClient\n    .getEntities()\n    .batchDelete(Book.class, ids);\n\nSystem.out.println(\n    \n    "Affected row count: " + \n    result.getTotalAffectedRowCount() +\n\n    "\\nAffected row count of table \'BOOK\': " +\n    result.getAffectedRowCount(AffectedTable.of(Book.class)) +\n    \n    "\\nAffected row count of middle table \'BOOK_AUTHOR_MAPPING\': " +\n    result.getAffectedRowCount(\n        AffectedTable.of(BookProps.AUTHORS)\n    )\n);\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val ids: Collection<Long> = ...\nval result = sqlClient\n    .entities\n    .batchDelete(Book::class, ids)\nprintln(\n    """Affected row count: ${result.totalAffectedRowCount}\n        |Affected row count of table \'BOOK\': ${\n            result.affectedRowCount(Book::class)\n        }Affected row count of middle table \'BOOK_AUTHOR_MAPPING\': ${\n            result.affectedRowCount(Book::authors)\n        }\n    """.trimMargin()\n)\n')))),(0,o.kt)("p",null,"The final generated SQL is as follows"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"delete from BOOK_AUTHOR_MAPPING \nwhere BOOK_ID in(?, ?, ?, ?)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"delete from BOOK \nwhere ID in(?, ?, ?, ?)\n")))),(0,o.kt)("p",null,"The print result is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Affected row count: 9\nAffected row count of table 'BOOK': 4\nAffected row count of middle table 'BOOK_AUTHOR_MAPPING': 5\n")))}k.isMDXComponent=!0}}]);