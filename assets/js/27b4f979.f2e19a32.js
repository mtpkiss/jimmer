"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[7354],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=u(n),m=l,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),l=n(34334),i="tabItem_Ymn6";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,o),hidden:n},t)}},65488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(83117),l=n(67294),i=n(34334),o=n(72389),r=n(67392),s=n(7094),u=n(12466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n,o=e.lazy,d=e.block,m=e.defaultValue,h=e.values,k=e.groupId,g=e.className,b=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,r.l)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==T&&!v.some((function(e){return e.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,s.U)(),L=y.tabGroupChoices,N=y.setTabGroupChoices,O=(0,l.useState)(T),x=O[0],w=O[1],A=[],I=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var j=L[k];null!=j&&j!==x&&v.some((function(e){return e.value===j}))&&w(j)}var C=function(e){var t=e.currentTarget,n=A.indexOf(t),a=v[n].value;a!==x&&(I(t),w(a),null!=k&&N(k,String(a)))},B=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,l=A.indexOf(e.currentTarget)+1;n=null!=(a=A[l])?a:A[0];break;case"ArrowLeft":var i,o=A.indexOf(e.currentTarget)-1;n=null!=(i=A[o])?i:A[A.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",c)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},g)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return A.push(e)},onKeyDown:B,onFocus:C,onClick:C},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),o?(0,l.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,o.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},64226:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var a=n(83117),l=n(80102),i=(n(67294),n(3905)),o=n(65488),r=n(85162),s=["components"],u={sidebar_position:6,title:"Mutate middle table"},c=void 0,p={unversionedId:"jimmer-sql/mutation/association",id:"jimmer-sql/mutation/association",title:"Mutate middle table",description:"First, the middle table is hidden by the object model and has no direct corresponding java entity type. This issue has been discussed in the article Query middle Table and will not be repeated here.",source:"@site/docs/jimmer-sql/mutation/association.mdx",sourceDirName:"jimmer-sql/mutation",slug:"/jimmer-sql/mutation/association",permalink:"/jimmer/docs/jimmer-sql/mutation/association",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/mutation/association.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Mutate middle table"},sidebar:"tutorialSidebar",previous:{title:"Delete Command",permalink:"/jimmer/docs/jimmer-sql/mutation/delete-command"},next:{title:"Draft Interceptor",permalink:"/jimmer/docs/jimmer-sql/mutation/interceptor"}},d={},m=[{value:"The scope of this article",id:"the-scope-of-this-article",level:2},{value:"Insert assciations",id:"insert-assciations",level:2},{value:"Inverse transform",id:"inverse-transform",level:2},{value:"Batch insert",id:"batch-insert",level:2},{value:"Check for existence",id:"check-for-existence",level:2},{value:"Delete associations",id:"delete-associations",level:2},{value:"Batch delete",id:"batch-delete",level:2}],h={toc:m};function k(e){var t=e.components,n=(0,l.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"First, the middle table is hidden by the object model and has no direct corresponding java entity type. This issue has been discussed in the article ",(0,i.kt)("a",{parentName:"p",href:"../query/association"},"Query middle Table")," and will not be repeated here."),(0,i.kt)("p",null,"Also, in the ",(0,i.kt)("a",{parentName:"p",href:"./save-command"},"Save command")," chapter, we introduced the save command. It can compare the existing data in the database with the new data to be saved by the user. If an associated properties based on the middle table changes, the data of middle table will be modified."),(0,i.kt)("p",null,"It is true that the save command has many functions, including the modifying middle table. However, sometimes, we just need to simply insert or delete the data of middle table, we do not need the powerful functions of the save command, but we want the modification behavior of the middle table to be simple and efficient enough."),(0,i.kt)("p",null,"jimmer-sql allows developers to directly insert and delete data for middle tables in the simplest and most efficient way."),(0,i.kt)("h2",{id:"the-scope-of-this-article"},"The scope of this article"),(0,i.kt)("p",null,"Jimmer supports ",(0,i.kt)("a",{parentName:"p",href:"../advanced/trigger"},"trigger"),", which is divided into binlog trigger and transaction trigger."),(0,i.kt)("p",null,"Using transaction triggers will cause jimmer's modification operations to generate more and more complete queries to simulate triggers."),(0,i.kt)("p",null,"Several scenarios have been discussed in this article, and the generated SQL will be discussed for each scenario, all on the premise that transaction triggers are not used."),(0,i.kt)("h2",{id:"insert-assciations"},"Insert assciations"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    // highlight-next-line\n    .save(12L, 3L);\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(Book::authors)\n    // highlight-next-line\n    .save(12L, 3L)\n")))),(0,i.kt)("p",null,"The generated SQL is as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"insert into \n    BOOK_AUTHOR_MAPPING(\n        /* highlight-next-line */\n        BOOK_ID, AUTHOR_ID\n    ) \n    values (?, ?)\n")),(0,i.kt)("p",null,"This example demonstrates how to use the association property ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.authors")," to manipulate the middle table."),(0,i.kt)("p",null,"In the same way, we can also achieve the same purpose through the association property ",(0,i.kt)("inlineCode",{parentName:"p"},"Authors.books"),":"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(AuthorProps.BOOKS)\n    // highlight-next-line\n    .save(3L, 12L);\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(Author::books)\n    // highlight-next-line\n    .save(3L, 12L)\n")))),(0,i.kt)("p",null,"Note that the parameter order of the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method is different compared to the previous example because the direction of the association is different."),(0,i.kt)("p",null,"The generated SQL is as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"insert into \n    BOOK_AUTHOR_MAPPING(\n        /* highlight-next-line */\n        AUTHOR_ID, BOOK_ID\n    )\n    values (?, ?)\n")),(0,i.kt)("h2",{id:"inverse-transform"},"Inverse transform"),(0,i.kt)("p",null,"For bidirectional associations, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"reverse")," to switch between positive and negative associations"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Associations bookToAuthor = sqlClient\n    .getAssociations(BookProps.AUTHORS);\nAssociations authorToBook = sqlClient\n    .getAssociations(AuthorProps.BOOKS);\nAssociations authorToBook2 = \n    // highlight-next-line\n    bookToAuthor.reverse();\nAssociations bookToAuthor2 =\n    // highlight-next-line\n    authorToBook.reverse();\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val bookToAuthor = \n    sqlClient.getAssociations(\n        Book::authors\n    )\nval authorToBook = \n    sqlClient.getAssociations(\n        Author::books\n    )\nval authorToBook2 = \n    // highlight-next-line\n    bookToAuthor.reverse()\nval bookToAuthor2 = \n    // highlight-next-line\n    authorToBook.reverse()\n")))),(0,i.kt)("p",null,"In this code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bookToAuthor")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"bookToAuthor2")," are exactly equivalent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"authorToBook")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"authorToBook2")," are exactly equivalent")),(0,i.kt)("h2",{id:"batch-insert"},"Batch insert"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    // highlight-next-line\n    .batchSave(\n        Arrays.asList(\n            new Tuple2<>(10L, 1L),\n            new Tuple2<>(11L, 1L),\n            new Tuple2<>(12L, 1L),\n            new Tuple2<>(10L, 3L),\n            new Tuple2<>(11L, 3L),\n            new Tuple2<>(12L, 3L)\n        )\n    );\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(\n        Book::authors\n    ) \n    // highlight-next-line\n    .batchSave(\n        listOf(\n            Tuple2(10L, 1L),\n            Tuple2(11L, 1L),\n            Tuple2(12L, 1L),\n            Tuple2(10L, 3L),\n            Tuple2(11L, 3L),\n            Tuple2(12L, 3L)\n        )\n    )\n")))),(0,i.kt)("p",null,"There are 3 books, 2 authors, and 6 combinations in total. The ",(0,i.kt)("inlineCode",{parentName:"p"},"batchSave")," method inserts all these 6 combinations into the middle table, and the generated SQL is as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK_AUTHOR_MAPPING(\n    BOOK_ID, AUTHOR_ID\n) values \n    /* highlight-start */\n    (?, ?), \n    (?, ?), \n    (?, ?), \n    (?, ?), \n    (?, ?), \n    (?, ?)\n    /* highlight-end */\n")),(0,i.kt)("p",null,"The code above is very cumbersome, ",(0,i.kt)("inlineCode",{parentName:"p"},"3 * 2 = 6")," is acceptable, but what about ",(0,i.kt)("inlineCode",{parentName:"p"},"7 * 9 = 63"),"? Is it acceptable to build 63 tuples?"),(0,i.kt)("p",null,"jimmer-sql provides a shortcut"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    // Batch save `Cartesian product` \n    // of two id collections\n    // highlight-next-line\n    .batchSave(\n        Arrays.asList(\n            10L, 11L, 12L\n        ),\n        Arrays.asList(\n            1L, 3L\n        )\n    );\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(\n        Book::authors\n    )\n    // Batch save `Cartesian product` \n    // of two id collections\n    // highlight-next-line\n    .batchSave(\n        listOf(10L, 11L, 12L),\n        listOf(1L, 3L)\n    )\n")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"batchSave")," method above takes two collection parameters and inserts the Cartesian product of the two collections into the middle table table, so the function is the same as the previous example."),(0,i.kt)("h2",{id:"check-for-existence"},"Check for existence"),(0,i.kt)("p",null,"If you insert an existing id tuple into the middle table, the database will report an error because the uniqueness constraint is violated."),(0,i.kt)("p",null,"To solve this problem, an existence check can be performed."),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    .batchSaveCommand(\n        Arrays.asList(\n            10L, 11L, 12L\n        ),\n        Arrays.asList(\n            1L, 3L\n        )\n    )\n    // highlight-next-line\n    .checkExistence()\n    .execute();\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(\n        Book::authors\n    )\n    // highlight-next-line\n    .batchSave(\n        listOf(10L, 11L, 12L),\n        listOf(1L, 3L),\n        // highlight-next-line\n        checkExistence = true\n    )\n")))),(0,i.kt)("p",null,"Here ",(0,i.kt)("inlineCode",{parentName:"p"},"checkExistence()")," means to first check which data to be inserted already exists, and then only insert data that does not exist."),(0,i.kt)("p",null,"The generated SQL statement is as follows"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Check which data to be inserted already exists"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    BOOK_ID, AUTHOR_ID \nfrom BOOK_AUTHOR_MAPPING \nwhere \n    (BOOK_ID, AUTHOR_ID) in(\n        (?, ?), \n        (?, ?),\n        (?, ?),\n        (?, ?),\n        (?, ?),\n        (?, ?)\n    )\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Using the query results of the previous step, the data that really needs to be inserted can be calculated. If there is no data to be inserted, skip this step; otherwise, execute this step."),(0,i.kt)("p",{parentName:"li"},"Here, assuming that there are still two rows that really need to be inserted after the judgment, the generated SQL is:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK_AUTHOR_MAPPING(\n    BOOK_ID, AUTHOR_ID\n) values \n    (?, ?), \n    (?, ?)\n")))),(0,i.kt)("h2",{id:"delete-associations"},"Delete associations"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    // highlight-next-line\n    .delete(12L, 3L);\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(\n        Book::authors\n    ) \n    // highlight-next-line\n    .delete(12L, 3L)\n")))),(0,i.kt)("p",null,"The generated SQL is as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"delete from BOOK_AUTHOR_MAPPING \nwhere \n    (BOOK_ID, AUTHOR_ID) in (\n        (?, ?)\n    )\n")),(0,i.kt)("h2",{id:"batch-delete"},"Batch delete"),(0,i.kt)("p",null,"Similar to batch insert, there are two ways to implement batch delete"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    // highlight-next-line\n    .batchDelete(\n        Arrays.asList(\n            new Tuple2<>(10L, 1L),\n            new Tuple2<>(11L, 1L),\n            new Tuple2<>(12L, 1L),\n            new Tuple2<>(10L, 3L),\n            new Tuple2<>(11L, 3L),\n            new Tuple2<>(12L, 3L),\n        )\n    );\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(\n        Book::authors\n    ) \n    // highlight-next-line\n    .batchDelete(\n        listOf(\n            Tuple2(10L, 1L),\n            Tuple2(11L, 1L),\n            Tuple2(12L, 1L),\n            Tuple2(10L, 3L),\n            Tuple2(11L, 3L),\n            Tuple2(12L, 3L)\n        )\n    )\n")))),(0,i.kt)("p",null,"or"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"sqlClient\n    .getAssociations(BookProps.AUTHORS)\n    // highlight-next-line\n    .batchDelete(\n        Arrays.asList(10L, 11L, 12L),\n        Arrays.asList(1L, 3L)\n    );\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sqlClient\n    .getAssociations(\n        Book::authors\n    ) \n    // highlight-next-line\n    .batchDelete(\n        listOf(10L, 11L, 12L),\n        listOf(1L, 3L)\n    )\n")))),(0,i.kt)("p",null,"The generated SQL is as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"delete from BOOK_AUTHOR_MAPPING \nwhere \n    (BOOK_ID, AUTHOR_ID) in (\n        (?, ?), \n        (?, ?),\n        (?, ?), \n        (?, ?),\n        (?, ?), \n        (?, ?)\n    )\n")))}k.isMDXComponent=!0}}]);